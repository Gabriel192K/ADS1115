
Read ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00001afe  00001b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001afe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800116  00800116  00001ba8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000366d  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001232  00000000  00000000  000054c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011a8  00000000  00000000  000066f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b4  00000000  00000000  0000789c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dce  00000000  00000000  00007f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019d4  00000000  00000000  00008d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000a6f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__dtors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__vector_18>
      4c:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__vector_19>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	41 44       	sbci	r20, 0x41	; 65
      6a:	53 31       	cpi	r21, 0x13	; 19
      6c:	31 31       	cpi	r19, 0x11	; 17
      6e:	35 20       	and	r3, r5
      70:	6e 6f       	ori	r22, 0xFE	; 254
      72:	74 20       	and	r7, r4
      74:	77 6f       	ori	r23, 0xF7	; 247
      76:	72 6b       	ori	r23, 0xB2	; 178
      78:	69 6e       	ori	r22, 0xE9	; 233
      7a:	67 0a       	sbc	r6, r23
	...

0000007d <_ZZ4mainE3__c_0>:
      7d:	41 44 53 31 31 31 35 20 77 6f 72 6b 69 6e 67 0a     ADS1115 working.
	...

0000008e <_ZZ4mainE3__c>:
      8e:	41 44 53 31 31 31 35 20 52 65 61 64 69 6e 67 20     ADS1115 Reading 
      9e:	41 44 43 20 65 78 61 6d 70 6c 65 20 63 6f 64 65     ADC example code
      ae:	0a 00                                               ..

000000b0 <__ctors_start>:
      b0:	48 01       	movw	r8, r16
      b2:	c6 03       	fmuls	r20, r22
      b4:	61 05       	cpc	r22, r1
      b6:	d2 06       	cpc	r13, r18

000000b8 <__ctors_end>:
      b8:	4f 01       	movw	r8, r30
      ba:	68 05       	cpc	r22, r8

000000bc <__dtors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	ee ef       	ldi	r30, 0xFE	; 254
      d0:	fa e1       	ldi	r31, 0x1A	; 26
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	a6 31       	cpi	r26, 0x16	; 22
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	a6 e1       	ldi	r26, 0x16	; 22
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a8 35       	cpi	r26, 0x58	; 88
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>

000000ee <__do_global_ctors>:
      ee:	10 e0       	ldi	r17, 0x00	; 0
      f0:	cc e5       	ldi	r28, 0x5C	; 92
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	04 c0       	rjmp	.+8      	; 0xfe <__do_global_ctors+0x10>
      f6:	21 97       	sbiw	r28, 0x01	; 1
      f8:	fe 01       	movw	r30, r28
      fa:	0e 94 34 09 	call	0x1268	; 0x1268 <__tablejump2__>
      fe:	c8 35       	cpi	r28, 0x58	; 88
     100:	d1 07       	cpc	r29, r17
     102:	c9 f7       	brne	.-14     	; 0xf6 <__do_global_ctors+0x8>
     104:	0e 94 79 06 	call	0xcf2	; 0xcf2 <main>
     108:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__do_global_dtors>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <_ZN8__Time__C1EPVhS1_S1_S1_S1_>:
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
     110:	ef 92       	push	r14
     112:	ff 92       	push	r15
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
     118:	fc 01       	movw	r30, r24
     11a:	76 83       	std	Z+6, r23	; 0x06
     11c:	65 83       	std	Z+5, r22	; 0x05
     11e:	50 87       	std	Z+8, r21	; 0x08
     120:	47 83       	std	Z+7, r20	; 0x07
     122:	32 87       	std	Z+10, r19	; 0x0a
     124:	21 87       	std	Z+9, r18	; 0x09
     126:	14 87       	std	Z+12, r17	; 0x0c
     128:	03 87       	std	Z+11, r16	; 0x0b
     12a:	f6 86       	std	Z+14, r15	; 0x0e
     12c:	e5 86       	std	Z+13, r14	; 0x0d
     12e:	1f 91       	pop	r17
     130:	0f 91       	pop	r16
     132:	ff 90       	pop	r15
     134:	ef 90       	pop	r14
     136:	08 95       	ret

00000138 <_Z41__static_initialization_and_destruction_0ii>:
     138:	ef 92       	push	r14
     13a:	ff 92       	push	r15
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	a1 f4       	brne	.+40     	; 0x16c <_Z41__static_initialization_and_destruction_0ii+0x34>
     144:	6f 3f       	cpi	r22, 0xFF	; 255
     146:	7f 4f       	sbci	r23, 0xFF	; 255
     148:	89 f4       	brne	.+34     	; 0x16c <_Z41__static_initialization_and_destruction_0ii+0x34>
     14a:	0f 2e       	mov	r0, r31
     14c:	f6 e4       	ldi	r31, 0x46	; 70
     14e:	ef 2e       	mov	r14, r31
     150:	f1 2c       	mov	r15, r1
     152:	f0 2d       	mov	r31, r0
     154:	07 e4       	ldi	r16, 0x47	; 71
     156:	10 e0       	ldi	r17, 0x00	; 0
     158:	2e e6       	ldi	r18, 0x6E	; 110
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	45 e4       	ldi	r20, 0x45	; 69
     15e:	50 e0       	ldi	r21, 0x00	; 0
     160:	64 e4       	ldi	r22, 0x44	; 68
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	86 e1       	ldi	r24, 0x16	; 22
     166:	91 e0       	ldi	r25, 0x01	; 1
     168:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8__Time__C1EPVhS1_S1_S1_S1_>
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	08 95       	ret

00000176 <_ZN8__Time__5beginEv>:
     176:	fc 01       	movw	r30, r24
     178:	84 81       	ldd	r24, Z+4	; 0x04
     17a:	81 11       	cpse	r24, r1
     17c:	1f c0       	rjmp	.+62     	; 0x1bc <_ZN8__Time__5beginEv+0x46>
     17e:	f8 94       	cli
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	88 23       	and	r24, r24
     184:	d1 f0       	breq	.+52     	; 0x1ba <_ZN8__Time__5beginEv+0x44>
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	84 83       	std	Z+4, r24	; 0x04
     18a:	a5 81       	ldd	r26, Z+5	; 0x05
     18c:	b6 81       	ldd	r27, Z+6	; 0x06
     18e:	8c 91       	ld	r24, X
     190:	82 60       	ori	r24, 0x02	; 2
     192:	8c 93       	st	X, r24
     194:	a7 81       	ldd	r26, Z+7	; 0x07
     196:	b0 85       	ldd	r27, Z+8	; 0x08
     198:	8c 91       	ld	r24, X
     19a:	82 60       	ori	r24, 0x02	; 2
     19c:	8c 93       	st	X, r24
     19e:	a1 85       	ldd	r26, Z+9	; 0x09
     1a0:	b2 85       	ldd	r27, Z+10	; 0x0a
     1a2:	8c 91       	ld	r24, X
     1a4:	82 60       	ori	r24, 0x02	; 2
     1a6:	8c 93       	st	X, r24
     1a8:	a5 85       	ldd	r26, Z+13	; 0x0d
     1aa:	b6 85       	ldd	r27, Z+14	; 0x0e
     1ac:	1c 92       	st	X, r1
     1ae:	a3 85       	ldd	r26, Z+11	; 0x0b
     1b0:	b4 85       	ldd	r27, Z+12	; 0x0c
     1b2:	87 ec       	ldi	r24, 0xC7	; 199
     1b4:	8c 93       	st	X, r24
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	e4 cf       	rjmp	.-56     	; 0x182 <_ZN8__Time__5beginEv+0xc>
     1ba:	78 94       	sei
     1bc:	08 95       	ret

000001be <_ZN8__Time__6microsEv>:
     1be:	fc 01       	movw	r30, r24
     1c0:	8f b7       	in	r24, 0x3f	; 63
     1c2:	f8 94       	cli
     1c4:	91 e0       	ldi	r25, 0x01	; 1
     1c6:	99 23       	and	r25, r25
     1c8:	31 f0       	breq	.+12     	; 0x1d6 <_ZN8__Time__6microsEv+0x18>
     1ca:	40 81       	ld	r20, Z
     1cc:	51 81       	ldd	r21, Z+1	; 0x01
     1ce:	62 81       	ldd	r22, Z+2	; 0x02
     1d0:	73 81       	ldd	r23, Z+3	; 0x03
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	f8 cf       	rjmp	.-16     	; 0x1c6 <_ZN8__Time__6microsEv+0x8>
     1d6:	8f bf       	out	0x3f, r24	; 63
     1d8:	cb 01       	movw	r24, r22
     1da:	ba 01       	movw	r22, r20
     1dc:	08 95       	ret

000001de <_ZN8__Time__6millisEv>:
     1de:	0e 94 df 00 	call	0x1be	; 0x1be <_ZN8__Time__6microsEv>
     1e2:	28 ee       	ldi	r18, 0xE8	; 232
     1e4:	33 e0       	ldi	r19, 0x03	; 3
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	0e 94 12 09 	call	0x1224	; 0x1224 <__udivmodsi4>
     1ee:	ca 01       	movw	r24, r20
     1f0:	b9 01       	movw	r22, r18
     1f2:	08 95       	ret

000001f4 <_ZN8__Time__11delayMillisEm>:
     1f4:	8f 92       	push	r8
     1f6:	9f 92       	push	r9
     1f8:	af 92       	push	r10
     1fa:	bf 92       	push	r11
     1fc:	cf 92       	push	r12
     1fe:	df 92       	push	r13
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	ec 01       	movw	r28, r24
     20a:	4a 01       	movw	r8, r20
     20c:	5b 01       	movw	r10, r22
     20e:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     212:	6b 01       	movw	r12, r22
     214:	7c 01       	movw	r14, r24
     216:	ce 01       	movw	r24, r28
     218:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     21c:	dc 01       	movw	r26, r24
     21e:	cb 01       	movw	r24, r22
     220:	8c 19       	sub	r24, r12
     222:	9d 09       	sbc	r25, r13
     224:	ae 09       	sbc	r26, r14
     226:	bf 09       	sbc	r27, r15
     228:	88 15       	cp	r24, r8
     22a:	99 05       	cpc	r25, r9
     22c:	aa 05       	cpc	r26, r10
     22e:	bb 05       	cpc	r27, r11
     230:	90 f3       	brcs	.-28     	; 0x216 <_ZN8__Time__11delayMillisEm+0x22>
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	ff 90       	pop	r15
     238:	ef 90       	pop	r14
     23a:	df 90       	pop	r13
     23c:	cf 90       	pop	r12
     23e:	bf 90       	pop	r11
     240:	af 90       	pop	r10
     242:	9f 90       	pop	r9
     244:	8f 90       	pop	r8
     246:	08 95       	ret

00000248 <__vector_14>:
Return:   None
*********************************************/
#if defined(__AVR_ATmega328P__)
ISR(TIMER0_COMPA_vect)
#endif
{
     248:	1f 92       	push	r1
     24a:	0f 92       	push	r0
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	0f 92       	push	r0
     250:	11 24       	eor	r1, r1
     252:	8f 93       	push	r24
     254:	9f 93       	push	r25
     256:	af 93       	push	r26
     258:	bf 93       	push	r27
     25a:	ef 93       	push	r30
     25c:	ff 93       	push	r31
        }
}

inline void __Time__::countIRQ(void)
{
    this->counter += MICROS_RESOLUTION;
     25e:	e6 e1       	ldi	r30, 0x16	; 22
     260:	f1 e0       	ldi	r31, 0x01	; 1
     262:	80 81       	ld	r24, Z
     264:	91 81       	ldd	r25, Z+1	; 0x01
     266:	a2 81       	ldd	r26, Z+2	; 0x02
     268:	b3 81       	ldd	r27, Z+3	; 0x03
     26a:	8c 59       	subi	r24, 0x9C	; 156
     26c:	9f 4f       	sbci	r25, 0xFF	; 255
     26e:	af 4f       	sbci	r26, 0xFF	; 255
     270:	bf 4f       	sbci	r27, 0xFF	; 255
     272:	80 83       	st	Z, r24
     274:	91 83       	std	Z+1, r25	; 0x01
     276:	a2 83       	std	Z+2, r26	; 0x02
     278:	b3 83       	std	Z+3, r27	; 0x03
#if defined(__AVR_ATmega328P__)
ISR(TIMER0_COMPA_vect)
#endif
{
    Time.countIRQ();
}
     27a:	ff 91       	pop	r31
     27c:	ef 91       	pop	r30
     27e:	bf 91       	pop	r27
     280:	af 91       	pop	r26
     282:	9f 91       	pop	r25
     284:	8f 91       	pop	r24
     286:	0f 90       	pop	r0
     288:	0f be       	out	0x3f, r0	; 63
     28a:	0f 90       	pop	r0
     28c:	1f 90       	pop	r1
     28e:	18 95       	reti

00000290 <_GLOBAL__sub_I__ZN8__Time__C2EPVhS1_S1_S1_S1_>:
     290:	6f ef       	ldi	r22, 0xFF	; 255
     292:	7f ef       	ldi	r23, 0xFF	; 255
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 9c 00 	call	0x138	; 0x138 <_Z41__static_initialization_and_destruction_0ii>
     29c:	08 95       	ret

0000029e <_GLOBAL__sub_D__ZN8__Time__C2EPVhS1_S1_S1_S1_>:
     29e:	6f ef       	ldi	r22, 0xFF	; 255
     2a0:	7f ef       	ldi	r23, 0xFF	; 255
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	0e 94 9c 00 	call	0x138	; 0x138 <_Z41__static_initialization_and_destruction_0ii>
     2aa:	08 95       	ret

000002ac <_ZN7__TWI__C1EPVhS1_S1_S1_S1_S1_>:
Function: __TWI__()
Purpose:  Constructor to __TWI__ class
Input:    None
Return:   None
*********************************************/
__TWI__::__TWI__(volatile uint8_t* twbr, volatile uint8_t* twsr, volatile uint8_t* twar,\
     2ac:	cf 92       	push	r12
     2ae:	df 92       	push	r13
     2b0:	ef 92       	push	r14
     2b2:	ff 92       	push	r15
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	fc 01       	movw	r30, r24
                 volatile uint8_t* twdr, volatile uint8_t* twcr, volatile uint8_t* twamr)
{
    this->twbr = twbr;
     2ba:	76 83       	std	Z+6, r23	; 0x06
     2bc:	65 83       	std	Z+5, r22	; 0x05
    this->twsr = twsr;
     2be:	50 87       	std	Z+8, r21	; 0x08
     2c0:	47 83       	std	Z+7, r20	; 0x07
    this->twar = twar;
     2c2:	32 87       	std	Z+10, r19	; 0x0a
     2c4:	21 87       	std	Z+9, r18	; 0x09
    this->twdr = twdr;
     2c6:	14 87       	std	Z+12, r17	; 0x0c
     2c8:	03 87       	std	Z+11, r16	; 0x0b
    this->twcr = twcr;
     2ca:	f6 86       	std	Z+14, r15	; 0x0e
     2cc:	e5 86       	std	Z+13, r14	; 0x0d
    this->twamr = twamr;
     2ce:	d0 8a       	std	Z+16, r13	; 0x10
     2d0:	c7 86       	std	Z+15, r12	; 0x0f
}
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	ff 90       	pop	r15
     2d8:	ef 90       	pop	r14
     2da:	df 90       	pop	r13
     2dc:	cf 90       	pop	r12
     2de:	08 95       	ret

000002e0 <_Z41__static_initialization_and_destruction_0ii>:
    digitalWrite(&SCL_DOR, SCL_BIT, LOW); /* Set <SCL> Data Output Register as <LOW>*/
    digitalWrite(&SDA_DOR, SDA_BIT, LOW); /* Set <SDA> Data Output Register as <LOW>*/
}

#if defined(__AVR_ATmega328P__)
__TWI__ TWI = __TWI__(&TWBR, &TWSR, &TWAR, &TWDR, &TWCR, &TWAMR);
     2e0:	cf 92       	push	r12
     2e2:	df 92       	push	r13
     2e4:	ef 92       	push	r14
     2e6:	ff 92       	push	r15
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	01 97       	sbiw	r24, 0x01	; 1
     2ee:	c9 f4       	brne	.+50     	; 0x322 <_Z41__static_initialization_and_destruction_0ii+0x42>
     2f0:	6f 3f       	cpi	r22, 0xFF	; 255
     2f2:	7f 4f       	sbci	r23, 0xFF	; 255
     2f4:	b1 f4       	brne	.+44     	; 0x322 <_Z41__static_initialization_and_destruction_0ii+0x42>
     2f6:	0f 2e       	mov	r0, r31
     2f8:	fd eb       	ldi	r31, 0xBD	; 189
     2fa:	cf 2e       	mov	r12, r31
     2fc:	d1 2c       	mov	r13, r1
     2fe:	f0 2d       	mov	r31, r0
     300:	0f 2e       	mov	r0, r31
     302:	fc eb       	ldi	r31, 0xBC	; 188
     304:	ef 2e       	mov	r14, r31
     306:	f1 2c       	mov	r15, r1
     308:	f0 2d       	mov	r31, r0
     30a:	0b eb       	ldi	r16, 0xBB	; 187
     30c:	10 e0       	ldi	r17, 0x00	; 0
     30e:	2a eb       	ldi	r18, 0xBA	; 186
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	49 eb       	ldi	r20, 0xB9	; 185
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	68 eb       	ldi	r22, 0xB8	; 184
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	85 e2       	ldi	r24, 0x25	; 37
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN7__TWI__C1EPVhS1_S1_S1_S1_S1_>
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	df 90       	pop	r13
     32c:	cf 90       	pop	r12
     32e:	08 95       	ret

00000330 <_ZN7__TWI__12setFrequencyEm>:
Purpose:  Set desired frequency of TWI bus
Input:    Frequency
Return:   None
*********************************************/
void __TWI__::setFrequency(uint32_t frequency)
{
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	9a 01       	movw	r18, r20
     336:	ab 01       	movw	r20, r22
    *this->twbr = (((F_CPU / frequency) - 16) / 2); /* Calculate <TWI> baudrate in terms of frequency */
     338:	fc 01       	movw	r30, r24
     33a:	c5 81       	ldd	r28, Z+5	; 0x05
     33c:	d6 81       	ldd	r29, Z+6	; 0x06
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	74 e2       	ldi	r23, 0x24	; 36
     342:	84 ef       	ldi	r24, 0xF4	; 244
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 12 09 	call	0x1224	; 0x1224 <__udivmodsi4>
     34a:	da 01       	movw	r26, r20
     34c:	c9 01       	movw	r24, r18
     34e:	40 97       	sbiw	r24, 0x10	; 16
     350:	a1 09       	sbc	r26, r1
     352:	b1 09       	sbc	r27, r1
     354:	b6 95       	lsr	r27
     356:	a7 95       	ror	r26
     358:	97 95       	ror	r25
     35a:	87 95       	ror	r24
     35c:	88 83       	st	Y, r24
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <_ZN7__TWI__5beginEv>:
Purpose:  Start TWI bus
Input:    None
Return:   None
*********************************************/
void __TWI__::begin(void)
{
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	ec 01       	movw	r28, r24
{
    if (port == NULL)
        return;
    switch (mode)
    {
        case INPUT : *port &= ~(1 << bit); break;
     36a:	87 b1       	in	r24, 0x07	; 7
     36c:	8f 7d       	andi	r24, 0xDF	; 223
     36e:	87 b9       	out	0x07, r24	; 7
     370:	87 b1       	in	r24, 0x07	; 7
     372:	8f 7e       	andi	r24, 0xEF	; 239
     374:	87 b9       	out	0x07, r24	; 7
    if (port == NULL)
        return;
    switch (mode)
    {
        case LOW   : *port &= ~(1 << bit); break;
        case HIGH  : *port |=  (1 << bit); break;
     376:	88 b1       	in	r24, 0x08	; 8
     378:	80 62       	ori	r24, 0x20	; 32
     37a:	88 b9       	out	0x08, r24	; 8
     37c:	88 b1       	in	r24, 0x08	; 8
     37e:	80 61       	ori	r24, 0x10	; 16
     380:	88 b9       	out	0x08, r24	; 8
    /*
     * External resistors for both SCL & SDA are required
     * Usually 4K7 or 10K are used
     */

    Time.begin();                              /* Start Time implementation  */
     382:	86 e1       	ldi	r24, 0x16	; 22
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN8__Time__5beginEv>
    this->setFrequency(TWI_DEFAULT_FREQUENCY); /* Set default <TWI> frequency */ 
     38a:	40 e8       	ldi	r20, 0x80	; 128
     38c:	5a e1       	ldi	r21, 0x1A	; 26
     38e:	66 e0       	ldi	r22, 0x06	; 6
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	ce 01       	movw	r24, r28
     394:	0e 94 98 01 	call	0x330	; 0x330 <_ZN7__TWI__12setFrequencyEm>
    TWI_BEGIN;                                 /* Send <BEGIN> condition */
     398:	ed 85       	ldd	r30, Y+13	; 0x0d
     39a:	fe 85       	ldd	r31, Y+14	; 0x0e
     39c:	84 e4       	ldi	r24, 0x44	; 68
     39e:	80 83       	st	Z, r24
}
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	08 95       	ret

000003a6 <_ZN7__TWI__3endEv>:
Input:    None
Return:   None
*********************************************/
void __TWI__::end(void)
{
    TWI_END;                              /* Send <END> condition */
     3a6:	dc 01       	movw	r26, r24
     3a8:	1d 96       	adiw	r26, 0x0d	; 13
     3aa:	ed 91       	ld	r30, X+
     3ac:	fc 91       	ld	r31, X
     3ae:	1e 97       	sbiw	r26, 0x0e	; 14
     3b0:	10 82       	st	Z, r1
{
    if (port == NULL)
        return;
    switch (mode)
    {
        case LOW   : *port &= ~(1 << bit); break;
     3b2:	88 b1       	in	r24, 0x08	; 8
     3b4:	8f 7d       	andi	r24, 0xDF	; 223
     3b6:	88 b9       	out	0x08, r24	; 8
     3b8:	88 b1       	in	r24, 0x08	; 8
     3ba:	8f 7e       	andi	r24, 0xEF	; 239
     3bc:	88 b9       	out	0x08, r24	; 8
     3be:	08 95       	ret

000003c0 <_ZN7__TWI__5resetEv>:
Purpose:  Reset TWI bus
Input:    None
Return:   None
*********************************************/
void __TWI__::reset(void)
{
     3c0:	0f 93       	push	r16
     3c2:	1f 93       	push	r17
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	ec 01       	movw	r28, r24
    uint8_t twbr = *this->twbr; /* Copy current TWBR */ 
     3ca:	ed 81       	ldd	r30, Y+5	; 0x05
     3cc:	fe 81       	ldd	r31, Y+6	; 0x06
     3ce:	00 81       	ld	r16, Z
    uint8_t twar = *this->twar; /* Copy current TWAR */
     3d0:	e9 85       	ldd	r30, Y+9	; 0x09
     3d2:	fa 85       	ldd	r31, Y+10	; 0x0a
     3d4:	10 81       	ld	r17, Z
    __TWI__::end();             /* Stop TWI bus */
     3d6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN7__TWI__3endEv>
    __TWI__::begin();           /* Start TWI bus */
     3da:	ce 01       	movw	r24, r28
     3dc:	0e 94 b2 01 	call	0x364	; 0x364 <_ZN7__TWI__5beginEv>
    *this->twbr = twbr;         /* Write previous TWBR */ 
     3e0:	ed 81       	ldd	r30, Y+5	; 0x05
     3e2:	fe 81       	ldd	r31, Y+6	; 0x06
     3e4:	00 83       	st	Z, r16
    *this->twar = twar;         /* Write previous TWAR */ 
     3e6:	e9 85       	ldd	r30, Y+9	; 0x09
     3e8:	fa 85       	ldd	r31, Y+10	; 0x0a
     3ea:	10 83       	st	Z, r17
}
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	08 95       	ret

000003f6 <_ZN7__TWI__17beginTransmissionEh>:
Purpose:  Begin transmission of data
Input:    Address where data is transmitted
Return:   Status of transmission
*********************************************/
uint8_t __TWI__::beginTransmission(uint8_t address)
{
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	ec 01       	movw	r28, r24
     408:	f6 2e       	mov	r15, r22
    TWI_START;                                                 /* Send <START> condition */
     40a:	ed 85       	ldd	r30, Y+13	; 0x0d
     40c:	fe 85       	ldd	r31, Y+14	; 0x0e
     40e:	84 ea       	ldi	r24, 0xA4	; 164
     410:	80 83       	st	Z, r24
    timestamp = Time.millis();                                 /* Get a timestamp */ 
     412:	86 e1       	ldi	r24, 0x16	; 22
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     41a:	68 83       	st	Y, r22
     41c:	79 83       	std	Y+1, r23	; 0x01
     41e:	8a 83       	std	Y+2, r24	; 0x02
     420:	9b 83       	std	Y+3, r25	; 0x03
    while (!(*this->twcr & (1 << TWINT)))                      /* Wait for <TWINT> bit to set */ 
     422:	ed 85       	ldd	r30, Y+13	; 0x0d
     424:	fe 85       	ldd	r31, Y+14	; 0x0e
     426:	80 81       	ld	r24, Z
     428:	88 23       	and	r24, r24
     42a:	bc f0       	brlt	.+46     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
    {
        if ((Time.millis() - timestamp) > TWI_DEFAULT_TIMEOUT) /* If timeout occured */ 
     42c:	86 e1       	ldi	r24, 0x16	; 22
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     434:	08 81       	ld	r16, Y
     436:	19 81       	ldd	r17, Y+1	; 0x01
     438:	2a 81       	ldd	r18, Y+2	; 0x02
     43a:	3b 81       	ldd	r19, Y+3	; 0x03
     43c:	dc 01       	movw	r26, r24
     43e:	cb 01       	movw	r24, r22
     440:	80 1b       	sub	r24, r16
     442:	91 0b       	sbc	r25, r17
     444:	a2 0b       	sbc	r26, r18
     446:	b3 0b       	sbc	r27, r19
     448:	03 97       	sbiw	r24, 0x03	; 3
     44a:	a1 05       	cpc	r26, r1
     44c:	b1 05       	cpc	r27, r1
     44e:	48 f3       	brcs	.-46     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
        {
            this->reset();                                     /* Reset <TWI> bus */
     450:	ce 01       	movw	r24, r28
     452:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN7__TWI__5resetEv>
            return (0);
     456:	10 e0       	ldi	r17, 0x00	; 0
     458:	56 c0       	rjmp	.+172    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
        }
    }

    address = (address << 1);                                  /* Shift address to left 1 bit */
     45a:	ff 0c       	add	r15, r15
    timestamp = Time.millis();                                 /* Get a timestamp */ 
     45c:	86 e1       	ldi	r24, 0x16	; 22
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     464:	68 83       	st	Y, r22
     466:	79 83       	std	Y+1, r23	; 0x01
     468:	8a 83       	std	Y+2, r24	; 0x02
     46a:	9b 83       	std	Y+3, r25	; 0x03
    do
    {
        *this->twdr = address;                                 /* Write address into <TWDR> */ 
     46c:	eb 85       	ldd	r30, Y+11	; 0x0b
     46e:	fc 85       	ldd	r31, Y+12	; 0x0c
     470:	f0 82       	st	Z, r15
        if ((Time.millis() - timestamp) > TWI_DEFAULT_TIMEOUT) /* If timeout occured */
     472:	86 e1       	ldi	r24, 0x16	; 22
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     47a:	08 81       	ld	r16, Y
     47c:	19 81       	ldd	r17, Y+1	; 0x01
     47e:	2a 81       	ldd	r18, Y+2	; 0x02
     480:	3b 81       	ldd	r19, Y+3	; 0x03
     482:	dc 01       	movw	r26, r24
     484:	cb 01       	movw	r24, r22
     486:	80 1b       	sub	r24, r16
     488:	91 0b       	sbc	r25, r17
     48a:	a2 0b       	sbc	r26, r18
     48c:	b3 0b       	sbc	r27, r19
     48e:	03 97       	sbiw	r24, 0x03	; 3
     490:	a1 05       	cpc	r26, r1
     492:	b1 05       	cpc	r27, r1
     494:	28 f0       	brcs	.+10     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
        {
            this->reset();                                     /* Reset <TWI> bus */
     496:	ce 01       	movw	r24, r28
     498:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN7__TWI__5resetEv>
            return (0);
     49c:	10 e0       	ldi	r17, 0x00	; 0
     49e:	33 c0       	rjmp	.+102    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
        }
    } while (*this->twcr & (1 << TWWC));                       /* Wait for <TWWC> bit to clear */
     4a0:	ed 85       	ldd	r30, Y+13	; 0x0d
     4a2:	fe 85       	ldd	r31, Y+14	; 0x0e
     4a4:	80 81       	ld	r24, Z
        }
    }

    address = (address << 1);                                  /* Shift address to left 1 bit */
    timestamp = Time.millis();                                 /* Get a timestamp */ 
    do
     4a6:	18 2f       	mov	r17, r24
     4a8:	18 70       	andi	r17, 0x08	; 8
     4aa:	83 fd       	sbrc	r24, 3
     4ac:	df cf       	rjmp	.-66     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
            this->reset();                                     /* Reset <TWI> bus */
            return (0);
        }
    } while (*this->twcr & (1 << TWWC));                       /* Wait for <TWWC> bit to clear */

    TWI_WRITE;                                                 /* Send <WRITE> condition */
     4ae:	84 e8       	ldi	r24, 0x84	; 132
     4b0:	80 83       	st	Z, r24
    timestamp = Time.millis();                                 /* Get a timestamp */
     4b2:	86 e1       	ldi	r24, 0x16	; 22
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     4ba:	68 83       	st	Y, r22
     4bc:	79 83       	std	Y+1, r23	; 0x01
     4be:	8a 83       	std	Y+2, r24	; 0x02
     4c0:	9b 83       	std	Y+3, r25	; 0x03
    while (!(*this->twcr & (1 << TWINT)))                      /* Wait for <TWINT> bit to set */
     4c2:	ed 85       	ldd	r30, Y+13	; 0x0d
     4c4:	fe 85       	ldd	r31, Y+14	; 0x0e
     4c6:	80 81       	ld	r24, Z
     4c8:	88 23       	and	r24, r24
     4ca:	b4 f0       	brlt	.+44     	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
    {
        if ((Time.millis() - timestamp) > TWI_DEFAULT_TIMEOUT) /* If timeout occured */ 
     4cc:	86 e1       	ldi	r24, 0x16	; 22
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     4d4:	c8 80       	ld	r12, Y
     4d6:	d9 80       	ldd	r13, Y+1	; 0x01
     4d8:	ea 80       	ldd	r14, Y+2	; 0x02
     4da:	fb 80       	ldd	r15, Y+3	; 0x03
     4dc:	dc 01       	movw	r26, r24
     4de:	cb 01       	movw	r24, r22
     4e0:	8c 19       	sub	r24, r12
     4e2:	9d 09       	sbc	r25, r13
     4e4:	ae 09       	sbc	r26, r14
     4e6:	bf 09       	sbc	r27, r15
     4e8:	03 97       	sbiw	r24, 0x03	; 3
     4ea:	a1 05       	cpc	r26, r1
     4ec:	b1 05       	cpc	r27, r1
     4ee:	48 f3       	brcs	.-46     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
        {
            this->reset();                                  /* Reset <TWI> bus */
     4f0:	ce 01       	movw	r24, r28
     4f2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN7__TWI__5resetEv>
            return (0);
     4f6:	07 c0       	rjmp	.+14     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
        }
    }
    if (TWI_STATUS == TWI_MASTER_SLAVE_ACK) return (1);       /* If slave returned <ACK> */
     4f8:	ef 81       	ldd	r30, Y+7	; 0x07
     4fa:	f8 85       	ldd	r31, Y+8	; 0x08
     4fc:	80 81       	ld	r24, Z
     4fe:	88 7f       	andi	r24, 0xF8	; 248
     500:	88 31       	cpi	r24, 0x18	; 24
     502:	09 f4       	brne	.+2      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
     504:	11 e0       	ldi	r17, 0x01	; 1
    return (0);
}
     506:	81 2f       	mov	r24, r17
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	df 90       	pop	r13
     516:	cf 90       	pop	r12
     518:	08 95       	ret

0000051a <_ZN7__TWI__5writeEh>:
Purpose:  Write data on the TWI bus
Input:    Byte of data to be sent
Return:   Status of transmission
*********************************************/
uint8_t __TWI__::write(uint8_t data)
{
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	ec 01       	movw	r28, r24
    *this->twdr = data;                                        /* Write data into <TWDR> */ 
     524:	eb 85       	ldd	r30, Y+11	; 0x0b
     526:	fc 85       	ldd	r31, Y+12	; 0x0c
     528:	60 83       	st	Z, r22
    TWI_WRITE;                                                 /* Send <WRITE> condition */ 
     52a:	ed 85       	ldd	r30, Y+13	; 0x0d
     52c:	fe 85       	ldd	r31, Y+14	; 0x0e
     52e:	84 e8       	ldi	r24, 0x84	; 132
     530:	80 83       	st	Z, r24
    timestamp = Time.millis();                                 /* Get a timestamp */
     532:	86 e1       	ldi	r24, 0x16	; 22
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     53a:	68 83       	st	Y, r22
     53c:	79 83       	std	Y+1, r23	; 0x01
     53e:	8a 83       	std	Y+2, r24	; 0x02
     540:	9b 83       	std	Y+3, r25	; 0x03
    while (!(*this->twcr & (1 << TWINT)))                      /* Wait for <TWINT> bit to set */
     542:	ed 85       	ldd	r30, Y+13	; 0x0d
     544:	fe 85       	ldd	r31, Y+14	; 0x0e
     546:	80 81       	ld	r24, Z
     548:	88 23       	and	r24, r24
     54a:	bc f0       	brlt	.+46     	; 0x57a <_ZN7__TWI__5writeEh+0x60>
    {
        if ((Time.millis() - timestamp) > TWI_DEFAULT_TIMEOUT) /* If timeout occured */ 
     54c:	86 e1       	ldi	r24, 0x16	; 22
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     554:	08 81       	ld	r16, Y
     556:	19 81       	ldd	r17, Y+1	; 0x01
     558:	2a 81       	ldd	r18, Y+2	; 0x02
     55a:	3b 81       	ldd	r19, Y+3	; 0x03
     55c:	dc 01       	movw	r26, r24
     55e:	cb 01       	movw	r24, r22
     560:	80 1b       	sub	r24, r16
     562:	91 0b       	sbc	r25, r17
     564:	a2 0b       	sbc	r26, r18
     566:	b3 0b       	sbc	r27, r19
     568:	03 97       	sbiw	r24, 0x03	; 3
     56a:	a1 05       	cpc	r26, r1
     56c:	b1 05       	cpc	r27, r1
     56e:	48 f3       	brcs	.-46     	; 0x542 <_ZN7__TWI__5writeEh+0x28>
        {
            this->reset();                                     /* Reset <TWI> bus */
     570:	ce 01       	movw	r24, r28
     572:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN7__TWI__5resetEv>
            return (0);
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	01 c0       	rjmp	.+2      	; 0x57c <_ZN7__TWI__5writeEh+0x62>
        }
    }
	return (1);
     57a:	81 e0       	ldi	r24, 0x01	; 1
}
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	1f 91       	pop	r17
     582:	0f 91       	pop	r16
     584:	08 95       	ret

00000586 <_ZN7__TWI__11requestFromEhh>:
Purpose:  Request data from slave
Input:    Address of the slave and amount of bytes supposed to get
Return:   Amount of bytes supposed to get
*********************************************/
uint8_t __TWI__::requestFrom(uint8_t address, uint8_t bytes)
{
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	ec 01       	movw	r28, r24
     598:	f6 2e       	mov	r15, r22
    requestedBytes = bytes;                                    /* Keep amount of bytes to be read */
     59a:	4c 83       	std	Y+4, r20	; 0x04
    TWI_START;                                                 /* Send <START> condition */
     59c:	ed 85       	ldd	r30, Y+13	; 0x0d
     59e:	fe 85       	ldd	r31, Y+14	; 0x0e
     5a0:	84 ea       	ldi	r24, 0xA4	; 164
     5a2:	80 83       	st	Z, r24
    timestamp = Time.millis();                                 /* Get a timestamp */
     5a4:	86 e1       	ldi	r24, 0x16	; 22
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     5ac:	68 83       	st	Y, r22
     5ae:	79 83       	std	Y+1, r23	; 0x01
     5b0:	8a 83       	std	Y+2, r24	; 0x02
     5b2:	9b 83       	std	Y+3, r25	; 0x03
    while (!(*this->twcr & (1 << TWINT)))                      /* Wait for <TWINT> bit to set */
     5b4:	ed 85       	ldd	r30, Y+13	; 0x0d
     5b6:	fe 85       	ldd	r31, Y+14	; 0x0e
     5b8:	80 81       	ld	r24, Z
     5ba:	88 23       	and	r24, r24
     5bc:	bc f0       	brlt	.+46     	; 0x5ec <_ZN7__TWI__11requestFromEhh+0x66>
    {
        if ((Time.millis() - timestamp) > TWI_DEFAULT_TIMEOUT) /* If timeout occured */ 
     5be:	86 e1       	ldi	r24, 0x16	; 22
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     5c6:	08 81       	ld	r16, Y
     5c8:	19 81       	ldd	r17, Y+1	; 0x01
     5ca:	2a 81       	ldd	r18, Y+2	; 0x02
     5cc:	3b 81       	ldd	r19, Y+3	; 0x03
     5ce:	dc 01       	movw	r26, r24
     5d0:	cb 01       	movw	r24, r22
     5d2:	80 1b       	sub	r24, r16
     5d4:	91 0b       	sbc	r25, r17
     5d6:	a2 0b       	sbc	r26, r18
     5d8:	b3 0b       	sbc	r27, r19
     5da:	03 97       	sbiw	r24, 0x03	; 3
     5dc:	a1 05       	cpc	r26, r1
     5de:	b1 05       	cpc	r27, r1
     5e0:	48 f3       	brcs	.-46     	; 0x5b4 <_ZN7__TWI__11requestFromEhh+0x2e>
        {
            this->reset();                                     /* Reset <TWI> bus */
     5e2:	ce 01       	movw	r24, r28
     5e4:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN7__TWI__5resetEv>
            return (0);
     5e8:	10 e0       	ldi	r17, 0x00	; 0
     5ea:	55 c0       	rjmp	.+170    	; 0x696 <_ZN7__TWI__11requestFromEhh+0x110>
        }
    }

    address = ((address << 1) | 1);                            /* Shift address to left 1 bit then set its least significant bit */
     5ec:	8f 2d       	mov	r24, r15
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	88 0f       	add	r24, r24
     5f2:	99 1f       	adc	r25, r25
     5f4:	28 2f       	mov	r18, r24
     5f6:	21 60       	ori	r18, 0x01	; 1
     5f8:	f2 2e       	mov	r15, r18
    timestamp = Time.millis();                                 /* Get a timestamp */
     5fa:	86 e1       	ldi	r24, 0x16	; 22
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     602:	68 83       	st	Y, r22
     604:	79 83       	std	Y+1, r23	; 0x01
     606:	8a 83       	std	Y+2, r24	; 0x02
     608:	9b 83       	std	Y+3, r25	; 0x03
    do
    {
        TWDR = address;                                        /* Write address into <TWDR> */
     60a:	f0 92 bb 00 	sts	0x00BB, r15	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        if ((Time.millis() - timestamp) > TWI_DEFAULT_TIMEOUT) /* If timeout occured */ 
     60e:	86 e1       	ldi	r24, 0x16	; 22
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     616:	08 81       	ld	r16, Y
     618:	19 81       	ldd	r17, Y+1	; 0x01
     61a:	2a 81       	ldd	r18, Y+2	; 0x02
     61c:	3b 81       	ldd	r19, Y+3	; 0x03
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	80 1b       	sub	r24, r16
     624:	91 0b       	sbc	r25, r17
     626:	a2 0b       	sbc	r26, r18
     628:	b3 0b       	sbc	r27, r19
     62a:	03 97       	sbiw	r24, 0x03	; 3
     62c:	a1 05       	cpc	r26, r1
     62e:	b1 05       	cpc	r27, r1
     630:	28 f0       	brcs	.+10     	; 0x63c <_ZN7__TWI__11requestFromEhh+0xb6>
        {
            this->reset();                                     /* Reset <TWI> bus */
     632:	ce 01       	movw	r24, r28
     634:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN7__TWI__5resetEv>
            return (0);
     638:	10 e0       	ldi	r17, 0x00	; 0
     63a:	2d c0       	rjmp	.+90     	; 0x696 <_ZN7__TWI__11requestFromEhh+0x110>
        }
    } while(*this->twcr & (1 << TWWC));                        /* Wait for <TWWC> bit to clear */
     63c:	ed 85       	ldd	r30, Y+13	; 0x0d
     63e:	fe 85       	ldd	r31, Y+14	; 0x0e
     640:	80 81       	ld	r24, Z
        }
    }

    address = ((address << 1) | 1);                            /* Shift address to left 1 bit then set its least significant bit */
    timestamp = Time.millis();                                 /* Get a timestamp */
    do
     642:	18 2f       	mov	r17, r24
     644:	18 70       	andi	r17, 0x08	; 8
     646:	83 fd       	sbrc	r24, 3
     648:	e0 cf       	rjmp	.-64     	; 0x60a <_ZN7__TWI__11requestFromEhh+0x84>
            this->reset();                                     /* Reset <TWI> bus */
            return (0);
        }
    } while(*this->twcr & (1 << TWWC));                        /* Wait for <TWWC> bit to clear */

    TWI_WRITE;                                                 /* Send <WRITE> condition */
     64a:	84 e8       	ldi	r24, 0x84	; 132
     64c:	80 83       	st	Z, r24
    timestamp = Time.millis();                                 /* Get a timestamp */
     64e:	86 e1       	ldi	r24, 0x16	; 22
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     656:	68 83       	st	Y, r22
     658:	79 83       	std	Y+1, r23	; 0x01
     65a:	8a 83       	std	Y+2, r24	; 0x02
     65c:	9b 83       	std	Y+3, r25	; 0x03
    while (!(*this->twcr & (1 << TWINT)))                      /* Wait for <TWINT> bit to set */
     65e:	ed 85       	ldd	r30, Y+13	; 0x0d
     660:	fe 85       	ldd	r31, Y+14	; 0x0e
     662:	80 81       	ld	r24, Z
     664:	88 23       	and	r24, r24
     666:	b4 f0       	brlt	.+44     	; 0x694 <_ZN7__TWI__11requestFromEhh+0x10e>
    {
        if ((Time.millis() - timestamp) > TWI_DEFAULT_TIMEOUT) /* If timeout occured */ 
     668:	86 e1       	ldi	r24, 0x16	; 22
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     670:	c8 80       	ld	r12, Y
     672:	d9 80       	ldd	r13, Y+1	; 0x01
     674:	ea 80       	ldd	r14, Y+2	; 0x02
     676:	fb 80       	ldd	r15, Y+3	; 0x03
     678:	dc 01       	movw	r26, r24
     67a:	cb 01       	movw	r24, r22
     67c:	8c 19       	sub	r24, r12
     67e:	9d 09       	sbc	r25, r13
     680:	ae 09       	sbc	r26, r14
     682:	bf 09       	sbc	r27, r15
     684:	03 97       	sbiw	r24, 0x03	; 3
     686:	a1 05       	cpc	r26, r1
     688:	b1 05       	cpc	r27, r1
     68a:	48 f3       	brcs	.-46     	; 0x65e <_ZN7__TWI__11requestFromEhh+0xd8>
        {
            this->reset();                                     /* Reset <TWI> bus */
     68c:	ce 01       	movw	r24, r28
     68e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN7__TWI__5resetEv>
            return (0);
     692:	01 c0       	rjmp	.+2      	; 0x696 <_ZN7__TWI__11requestFromEhh+0x110>
        }
    }
    return (requestedBytes);                                   /* Return amount of bytes meant to be received */
     694:	1c 81       	ldd	r17, Y+4	; 0x04
}
     696:	81 2f       	mov	r24, r17
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	ff 90       	pop	r15
     6a2:	ef 90       	pop	r14
     6a4:	df 90       	pop	r13
     6a6:	cf 90       	pop	r12
     6a8:	08 95       	ret

000006aa <_ZN7__TWI__4readEv>:
Purpose:  Read data from slave
Input:    None
Return:   Data from slave
*********************************************/
uint8_t __TWI__::read(void)
{
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	ec 01       	movw	r28, r24
    (--requestedBytes > 0) ? TWI_READ(1) : ((requestedBytes == 0) ? TWI_READ(0) : 0); /* If amount of bytes are over 0 send <READ> condtion with <ACK> and the last byte send an <NACK> */
     6b4:	8c 81       	ldd	r24, Y+4	; 0x04
     6b6:	81 50       	subi	r24, 0x01	; 1
     6b8:	8c 83       	std	Y+4, r24	; 0x04
     6ba:	88 23       	and	r24, r24
     6bc:	29 f0       	breq	.+10     	; 0x6c8 <_ZN7__TWI__4readEv+0x1e>
     6be:	ed 85       	ldd	r30, Y+13	; 0x0d
     6c0:	fe 85       	ldd	r31, Y+14	; 0x0e
     6c2:	84 ec       	ldi	r24, 0xC4	; 196
     6c4:	80 83       	st	Z, r24
     6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <_ZN7__TWI__4readEv+0x2a>
     6c8:	81 11       	cpse	r24, r1
     6ca:	04 c0       	rjmp	.+8      	; 0x6d4 <_ZN7__TWI__4readEv+0x2a>
     6cc:	ed 85       	ldd	r30, Y+13	; 0x0d
     6ce:	fe 85       	ldd	r31, Y+14	; 0x0e
     6d0:	84 e8       	ldi	r24, 0x84	; 132
     6d2:	80 83       	st	Z, r24
    timestamp = Time.millis();                                                        /* Get a timestamp */
     6d4:	86 e1       	ldi	r24, 0x16	; 22
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     6dc:	68 83       	st	Y, r22
     6de:	79 83       	std	Y+1, r23	; 0x01
     6e0:	8a 83       	std	Y+2, r24	; 0x02
     6e2:	9b 83       	std	Y+3, r25	; 0x03
    while (!(*this->twcr & (1 << TWINT)))                                             /* Wait for <TWINT> bit to set */
     6e4:	ed 85       	ldd	r30, Y+13	; 0x0d
     6e6:	fe 85       	ldd	r31, Y+14	; 0x0e
     6e8:	80 81       	ld	r24, Z
     6ea:	88 23       	and	r24, r24
     6ec:	bc f0       	brlt	.+46     	; 0x71c <_ZN7__TWI__4readEv+0x72>
    {
        if ((Time.millis() - timestamp) > TWI_DEFAULT_TIMEOUT)                        /* If timeout occured */ 
     6ee:	86 e1       	ldi	r24, 0x16	; 22
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     6f6:	08 81       	ld	r16, Y
     6f8:	19 81       	ldd	r17, Y+1	; 0x01
     6fa:	2a 81       	ldd	r18, Y+2	; 0x02
     6fc:	3b 81       	ldd	r19, Y+3	; 0x03
     6fe:	dc 01       	movw	r26, r24
     700:	cb 01       	movw	r24, r22
     702:	80 1b       	sub	r24, r16
     704:	91 0b       	sbc	r25, r17
     706:	a2 0b       	sbc	r26, r18
     708:	b3 0b       	sbc	r27, r19
     70a:	03 97       	sbiw	r24, 0x03	; 3
     70c:	a1 05       	cpc	r26, r1
     70e:	b1 05       	cpc	r27, r1
     710:	48 f3       	brcs	.-46     	; 0x6e4 <_ZN7__TWI__4readEv+0x3a>
        {
            this->reset();                                                            /* Reset <TWI> bus */
     712:	ce 01       	movw	r24, r28
     714:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN7__TWI__5resetEv>
            return (0);
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	03 c0       	rjmp	.+6      	; 0x722 <_ZN7__TWI__4readEv+0x78>
        }
    }
    return *this->twdr;                                                               /* Return data stored into <TWDR> */
     71c:	eb 85       	ldd	r30, Y+11	; 0x0b
     71e:	fc 85       	ldd	r31, Y+12	; 0x0c
     720:	80 81       	ld	r24, Z
}
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	08 95       	ret

0000072c <_ZN7__TWI__15endTransmissionEv>:
Purpose:  End transmission of data
Input:    None
Return:   None
*********************************************/
void __TWI__::endTransmission(void)
{
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	ec 01       	movw	r28, r24
    TWI_STOP;                                                /* Send <STOP> condition */
     736:	ed 85       	ldd	r30, Y+13	; 0x0d
     738:	fe 85       	ldd	r31, Y+14	; 0x0e
     73a:	84 e9       	ldi	r24, 0x94	; 148
     73c:	80 83       	st	Z, r24
    timestamp = Time.millis();                               /* Get a timestamp  */
     73e:	86 e1       	ldi	r24, 0x16	; 22
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     746:	68 83       	st	Y, r22
     748:	79 83       	std	Y+1, r23	; 0x01
     74a:	8a 83       	std	Y+2, r24	; 0x02
     74c:	9b 83       	std	Y+3, r25	; 0x03
    while (*this->twcr & (1 << TWSTO))                       /* Wait for <STOP> bit to clear */
     74e:	ed 85       	ldd	r30, Y+13	; 0x0d
     750:	fe 85       	ldd	r31, Y+14	; 0x0e
     752:	80 81       	ld	r24, Z
     754:	84 ff       	sbrs	r24, 4
     756:	15 c0       	rjmp	.+42     	; 0x782 <_ZN7__TWI__15endTransmissionEv+0x56>
    {
        if (Time.millis() - timestamp > TWI_DEFAULT_TIMEOUT) /* If timeout occured */ 
     758:	86 e1       	ldi	r24, 0x16	; 22
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__6millisEv>
     760:	08 81       	ld	r16, Y
     762:	19 81       	ldd	r17, Y+1	; 0x01
     764:	2a 81       	ldd	r18, Y+2	; 0x02
     766:	3b 81       	ldd	r19, Y+3	; 0x03
     768:	dc 01       	movw	r26, r24
     76a:	cb 01       	movw	r24, r22
     76c:	80 1b       	sub	r24, r16
     76e:	91 0b       	sbc	r25, r17
     770:	a2 0b       	sbc	r26, r18
     772:	b3 0b       	sbc	r27, r19
     774:	03 97       	sbiw	r24, 0x03	; 3
     776:	a1 05       	cpc	r26, r1
     778:	b1 05       	cpc	r27, r1
     77a:	48 f3       	brcs	.-46     	; 0x74e <_ZN7__TWI__15endTransmissionEv+0x22>
        {
            this->reset();                                   /* Reset <TWI> bus */
     77c:	ce 01       	movw	r24, r28
     77e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN7__TWI__5resetEv>
            return;
        }  
    }
}
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	08 95       	ret

0000078c <_GLOBAL__sub_I__ZN7__TWI__C2EPVhS1_S1_S1_S1_S1_>:
    digitalWrite(&SCL_DOR, SCL_BIT, LOW); /* Set <SCL> Data Output Register as <LOW>*/
    digitalWrite(&SDA_DOR, SDA_BIT, LOW); /* Set <SDA> Data Output Register as <LOW>*/
}

#if defined(__AVR_ATmega328P__)
__TWI__ TWI = __TWI__(&TWBR, &TWSR, &TWAR, &TWDR, &TWCR, &TWAMR);
     78c:	6f ef       	ldi	r22, 0xFF	; 255
     78e:	7f ef       	ldi	r23, 0xFF	; 255
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z41__static_initialization_and_destruction_0ii>
     798:	08 95       	ret

0000079a <_ZN9__USART__C1EPVhS1_S1_S1_S1_S1_>:
    this->hasBegin = 0;                    /* Allow reinitialization of USART bus */

    #if defined(__AVR_ATmega328P__)
    *this->ucsrb &= ~((1 << RXEN) | (1 << RXCIE) | (1 << TXEN)); /* Disable <RX>, <RX-IRQ>, <TX> */
    #endif
}
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	fc 01       	movw	r30, r24
     7a8:	76 87       	std	Z+14, r23	; 0x0e
     7aa:	65 87       	std	Z+13, r22	; 0x0d
     7ac:	50 8b       	std	Z+16, r21	; 0x10
     7ae:	47 87       	std	Z+15, r20	; 0x0f
     7b0:	32 8b       	std	Z+18, r19	; 0x12
     7b2:	21 8b       	std	Z+17, r18	; 0x11
     7b4:	14 8b       	std	Z+20, r17	; 0x14
     7b6:	03 8b       	std	Z+19, r16	; 0x13
     7b8:	f6 8a       	std	Z+22, r15	; 0x16
     7ba:	e5 8a       	std	Z+21, r14	; 0x15
     7bc:	d0 8e       	std	Z+24, r13	; 0x18
     7be:	c7 8a       	std	Z+23, r12	; 0x17
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	df 90       	pop	r13
     7ca:	cf 90       	pop	r12
     7cc:	08 95       	ret

000007ce <_Z41__static_initialization_and_destruction_0ii>:
     7ce:	cf 92       	push	r12
     7d0:	df 92       	push	r13
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	c9 f4       	brne	.+50     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7de:	6f 3f       	cpi	r22, 0xFF	; 255
     7e0:	7f 4f       	sbci	r23, 0xFF	; 255
     7e2:	b1 f4       	brne	.+44     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7e4:	0f 2e       	mov	r0, r31
     7e6:	f6 ec       	ldi	r31, 0xC6	; 198
     7e8:	cf 2e       	mov	r12, r31
     7ea:	d1 2c       	mov	r13, r1
     7ec:	f0 2d       	mov	r31, r0
     7ee:	0f 2e       	mov	r0, r31
     7f0:	f2 ec       	ldi	r31, 0xC2	; 194
     7f2:	ef 2e       	mov	r14, r31
     7f4:	f1 2c       	mov	r15, r1
     7f6:	f0 2d       	mov	r31, r0
     7f8:	01 ec       	ldi	r16, 0xC1	; 193
     7fa:	10 e0       	ldi	r17, 0x00	; 0
     7fc:	20 ec       	ldi	r18, 0xC0	; 192
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	44 ec       	ldi	r20, 0xC4	; 196
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	65 ec       	ldi	r22, 0xC5	; 197
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	86 e3       	ldi	r24, 0x36	; 54
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 cd 03 	call	0x79a	; 0x79a <_ZN9__USART__C1EPVhS1_S1_S1_S1_S1_>
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	08 95       	ret

0000081e <_ZN9__USART__5beginEm>:
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	fc 01       	movw	r30, r24
     830:	24 85       	ldd	r18, Z+12	; 0x0c
     832:	21 11       	cpse	r18, r1
     834:	6a c0       	rjmp	.+212    	; 0x90a <__stack+0xb>
     836:	ec 01       	movw	r28, r24
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	84 87       	std	Z+12, r24	; 0x0c
     83c:	cb 01       	movw	r24, r22
     83e:	ba 01       	movw	r22, r20
     840:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__floatunsisf>
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	40 e8       	ldi	r20, 0x80	; 128
     84a:	51 e4       	ldi	r21, 0x41	; 65
     84c:	0e 94 a5 08 	call	0x114a	; 0x114a <__mulsf3>
     850:	9b 01       	movw	r18, r22
     852:	ac 01       	movw	r20, r24
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	74 e2       	ldi	r23, 0x24	; 36
     858:	84 e7       	ldi	r24, 0x74	; 116
     85a:	9b e4       	ldi	r25, 0x4B	; 75
     85c:	0e 94 4b 07 	call	0xe96	; 0xe96 <__divsf3>
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	40 e8       	ldi	r20, 0x80	; 128
     866:	5f e3       	ldi	r21, 0x3F	; 63
     868:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__subsf3>
     86c:	6b 01       	movw	r12, r22
     86e:	7c 01       	movw	r14, r24
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	a9 01       	movw	r20, r18
     876:	0e 94 46 07 	call	0xe8c	; 0xe8c <__cmpsf2>
     87a:	88 23       	and	r24, r24
     87c:	6c f4       	brge	.+26     	; 0x898 <_ZN9__USART__5beginEm+0x7a>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	5f e3       	ldi	r21, 0x3F	; 63
     886:	c7 01       	movw	r24, r14
     888:	b6 01       	movw	r22, r12
     88a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__subsf3>
     88e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__fixsfsi>
     892:	06 2f       	mov	r16, r22
     894:	17 2f       	mov	r17, r23
     896:	0c c0       	rjmp	.+24     	; 0x8b0 <_ZN9__USART__5beginEm+0x92>
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	5f e3       	ldi	r21, 0x3F	; 63
     8a0:	c7 01       	movw	r24, r14
     8a2:	b6 01       	movw	r22, r12
     8a4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__addsf3>
     8a8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__fixsfsi>
     8ac:	06 2f       	mov	r16, r22
     8ae:	17 2f       	mov	r17, r23
     8b0:	61 e0       	ldi	r22, 0x01	; 1
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	0e 94 3a 09 	call	0x1274	; 0x1274 <calloc>
     8bc:	99 83       	std	Y+1, r25	; 0x01
     8be:	88 83       	st	Y, r24
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	0e 94 3a 09 	call	0x1274	; 0x1274 <calloc>
     8cc:	9f 83       	std	Y+7, r25	; 0x07
     8ce:	8e 83       	std	Y+6, r24	; 0x06
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	9b 83       	std	Y+3, r25	; 0x03
     8d6:	8a 83       	std	Y+2, r24	; 0x02
     8d8:	99 87       	std	Y+9, r25	; 0x09
     8da:	88 87       	std	Y+8, r24	; 0x08
     8dc:	f8 94       	cli
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	88 23       	and	r24, r24
     8e2:	91 f0       	breq	.+36     	; 0x908 <__stack+0x9>
     8e4:	ed 85       	ldd	r30, Y+13	; 0x0d
     8e6:	fe 85       	ldd	r31, Y+14	; 0x0e
     8e8:	10 83       	st	Z, r17
     8ea:	ef 85       	ldd	r30, Y+15	; 0x0f
     8ec:	f8 89       	ldd	r31, Y+16	; 0x10
     8ee:	00 83       	st	Z, r16
     8f0:	ed 89       	ldd	r30, Y+21	; 0x15
     8f2:	fe 89       	ldd	r31, Y+22	; 0x16
     8f4:	80 81       	ld	r24, Z
     8f6:	86 60       	ori	r24, 0x06	; 6
     8f8:	80 83       	st	Z, r24
     8fa:	eb 89       	ldd	r30, Y+19	; 0x13
     8fc:	fc 89       	ldd	r31, Y+20	; 0x14
     8fe:	80 81       	ld	r24, Z
     900:	88 69       	ori	r24, 0x98	; 152
     902:	80 83       	st	Z, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	ec cf       	rjmp	.-40     	; 0x8e0 <_ZN9__USART__5beginEm+0xc2>
     908:	78 94       	sei
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	ff 90       	pop	r15
     914:	ef 90       	pop	r14
     916:	df 90       	pop	r13
     918:	cf 90       	pop	r12
     91a:	08 95       	ret

0000091c <_ZN9__USART__5writeEh>:
     91c:	fc 01       	movw	r30, r24
     91e:	82 85       	ldd	r24, Z+10	; 0x0a
     920:	8f 5f       	subi	r24, 0xFF	; 255
     922:	90 85       	ldd	r25, Z+8	; 0x08
     924:	89 23       	and	r24, r25
     926:	93 85       	ldd	r25, Z+11	; 0x0b
     928:	89 17       	cp	r24, r25
     92a:	e9 f3       	breq	.-6      	; 0x926 <_ZN9__USART__5writeEh+0xa>
     92c:	82 87       	std	Z+10, r24	; 0x0a
     92e:	a6 81       	ldd	r26, Z+6	; 0x06
     930:	b7 81       	ldd	r27, Z+7	; 0x07
     932:	82 85       	ldd	r24, Z+10	; 0x0a
     934:	a8 0f       	add	r26, r24
     936:	b1 1d       	adc	r27, r1
     938:	6c 93       	st	X, r22
     93a:	03 88       	ldd	r0, Z+19	; 0x13
     93c:	f4 89       	ldd	r31, Z+20	; 0x14
     93e:	e0 2d       	mov	r30, r0
     940:	80 81       	ld	r24, Z
     942:	80 62       	ori	r24, 0x20	; 32
     944:	80 83       	st	Z, r24
     946:	08 95       	ret

00000948 <_ZN9__USART__5writeEPKh>:
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	8c 01       	movw	r16, r24
     952:	eb 01       	movw	r28, r22
     954:	68 81       	ld	r22, Y
     956:	66 23       	and	r22, r22
     958:	29 f0       	breq	.+10     	; 0x964 <_ZN9__USART__5writeEPKh+0x1c>
     95a:	21 96       	adiw	r28, 0x01	; 1
     95c:	c8 01       	movw	r24, r16
     95e:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN9__USART__5writeEh>
     962:	f8 cf       	rjmp	.-16     	; 0x954 <_ZN9__USART__5writeEPKh+0xc>
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	08 95       	ret

0000096e <_ZN9__USART__6printfEPKcz>:
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	da 95       	dec	r29
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	f8 94       	cli
     980:	de bf       	out	0x3e, r29	; 62
     982:	0f be       	out	0x3f, r0	; 63
     984:	cd bf       	out	0x3d, r28	; 61
     986:	8e 01       	movw	r16, r28
     988:	0f 5f       	subi	r16, 0xFF	; 255
     98a:	1f 4f       	sbci	r17, 0xFF	; 255
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	f8 01       	movw	r30, r16
     992:	9c 01       	movw	r18, r24
     994:	11 92       	st	Z+, r1
     996:	21 50       	subi	r18, 0x01	; 1
     998:	30 40       	sbci	r19, 0x00	; 0
     99a:	e1 f7       	brne	.-8      	; 0x994 <_ZN9__USART__6printfEPKcz+0x26>
     99c:	9e 01       	movw	r18, r28
     99e:	25 5f       	subi	r18, 0xF5	; 245
     9a0:	3e 4f       	sbci	r19, 0xFE	; 254
     9a2:	c7 5f       	subi	r28, 0xF7	; 247
     9a4:	de 4f       	sbci	r29, 0xFE	; 254
     9a6:	48 81       	ld	r20, Y
     9a8:	59 81       	ldd	r21, Y+1	; 0x01
     9aa:	c9 50       	subi	r28, 0x09	; 9
     9ac:	d1 40       	sbci	r29, 0x01	; 1
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	71 e0       	ldi	r23, 0x01	; 1
     9b2:	c8 01       	movw	r24, r16
     9b4:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <vsnprintf>
     9b8:	b8 01       	movw	r22, r16
     9ba:	c9 5f       	subi	r28, 0xF9	; 249
     9bc:	de 4f       	sbci	r29, 0xFE	; 254
     9be:	88 81       	ld	r24, Y
     9c0:	99 81       	ldd	r25, Y+1	; 0x01
     9c2:	c7 50       	subi	r28, 0x07	; 7
     9c4:	d1 40       	sbci	r29, 0x01	; 1
     9c6:	0e 94 a4 04 	call	0x948	; 0x948 <_ZN9__USART__5writeEPKh>
     9ca:	d3 95       	inc	r29
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	cd bf       	out	0x3d, r28	; 61
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	08 95       	ret

000009e0 <_ZN9__USART__6printPEPKc>:
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	8c 01       	movw	r16, r24
     9ea:	eb 01       	movw	r28, r22
     9ec:	fe 01       	movw	r30, r28
     9ee:	84 91       	lpm	r24, Z
     9f0:	88 23       	and	r24, r24
     9f2:	31 f0       	breq	.+12     	; 0xa00 <_ZN9__USART__6printPEPKc+0x20>
     9f4:	21 96       	adiw	r28, 0x01	; 1
     9f6:	64 91       	lpm	r22, Z
     9f8:	c8 01       	movw	r24, r16
     9fa:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN9__USART__5writeEh>
     9fe:	f6 cf       	rjmp	.-20     	; 0x9ec <_ZN9__USART__6printPEPKc+0xc>
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	08 95       	ret

00000a0a <__vector_18>:
Input:    Interrupt vector
Return:   None
************************/
#if defined(__AVR_ATmega328P__)
ISR(USART_RX_vect)
{
     a0a:	1f 92       	push	r1
     a0c:	0f 92       	push	r0
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	0f 92       	push	r0
     a12:	11 24       	eor	r1, r1
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	af 93       	push	r26
     a1a:	bf 93       	push	r27
     a1c:	ef 93       	push	r30
     a1e:	ff 93       	push	r31
Input:    None
Return:   None
***************************************************/
inline void __USART__::rxIRQ(void)
{
    this->USART_RX_HEAD = (this->USART_RX_HEAD + 1) & this->USART_RX_BUFFER_MASK; /* Increase head */
     a20:	e6 e3       	ldi	r30, 0x36	; 54
     a22:	f1 e0       	ldi	r31, 0x01	; 1
     a24:	84 81       	ldd	r24, Z+4	; 0x04
     a26:	92 81       	ldd	r25, Z+2	; 0x02
     a28:	8f 5f       	subi	r24, 0xFF	; 255
     a2a:	89 23       	and	r24, r25
     a2c:	84 83       	std	Z+4, r24	; 0x04
    this->USART_RX_BUFFER[this->USART_RX_HEAD] = *this->udr;                      /* Read data into buffer */
     a2e:	a0 81       	ld	r26, Z
     a30:	b1 81       	ldd	r27, Z+1	; 0x01
     a32:	84 81       	ldd	r24, Z+4	; 0x04
     a34:	a8 0f       	add	r26, r24
     a36:	b1 1d       	adc	r27, r1
     a38:	07 88       	ldd	r0, Z+23	; 0x17
     a3a:	f0 8d       	ldd	r31, Z+24	; 0x18
     a3c:	e0 2d       	mov	r30, r0
     a3e:	80 81       	ld	r24, Z
     a40:	8c 93       	st	X, r24
************************/
#if defined(__AVR_ATmega328P__)
ISR(USART_RX_vect)
{
    USART.rxIRQ();
}
     a42:	ff 91       	pop	r31
     a44:	ef 91       	pop	r30
     a46:	bf 91       	pop	r27
     a48:	af 91       	pop	r26
     a4a:	9f 91       	pop	r25
     a4c:	8f 91       	pop	r24
     a4e:	0f 90       	pop	r0
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	0f 90       	pop	r0
     a54:	1f 90       	pop	r1
     a56:	18 95       	reti

00000a58 <__vector_19>:
Input:    Interrupt vector
Return:   None
************************/
#if defined(__AVR_ATmega328P__)
ISR(USART_UDRE_vect)
{
     a58:	1f 92       	push	r1
     a5a:	0f 92       	push	r0
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	0f 92       	push	r0
     a60:	11 24       	eor	r1, r1
     a62:	2f 93       	push	r18
     a64:	8f 93       	push	r24
     a66:	9f 93       	push	r25
     a68:	af 93       	push	r26
     a6a:	bf 93       	push	r27
     a6c:	ef 93       	push	r30
     a6e:	ff 93       	push	r31
Input:    None
Return:   None
***************************************************/
inline void __USART__::txIRQ(void)
{
    if (this->USART_TX_HEAD != this->USART_TX_TAIL)                                   /* If data is available into buffer */
     a70:	e6 e3       	ldi	r30, 0x36	; 54
     a72:	f1 e0       	ldi	r31, 0x01	; 1
     a74:	92 85       	ldd	r25, Z+10	; 0x0a
     a76:	83 85       	ldd	r24, Z+11	; 0x0b
     a78:	98 17       	cp	r25, r24
     a7a:	81 f0       	breq	.+32     	; 0xa9c <__vector_19+0x44>
    {
        this->USART_TX_TAIL = (this->USART_TX_TAIL + 1) & this->USART_TX_BUFFER_MASK; /* Increase tail */
     a7c:	83 85       	ldd	r24, Z+11	; 0x0b
     a7e:	90 85       	ldd	r25, Z+8	; 0x08
     a80:	8f 5f       	subi	r24, 0xFF	; 255
     a82:	89 23       	and	r24, r25
     a84:	83 87       	std	Z+11, r24	; 0x0b
        *this->udr = this->USART_TX_BUFFER[this->USART_TX_TAIL];                      /* Load data from buffer */
     a86:	a7 89       	ldd	r26, Z+23	; 0x17
     a88:	b0 8d       	ldd	r27, Z+24	; 0x18
     a8a:	86 81       	ldd	r24, Z+6	; 0x06
     a8c:	97 81       	ldd	r25, Z+7	; 0x07
     a8e:	23 85       	ldd	r18, Z+11	; 0x0b
     a90:	fc 01       	movw	r30, r24
     a92:	e2 0f       	add	r30, r18
     a94:	f1 1d       	adc	r31, r1
     a96:	80 81       	ld	r24, Z
     a98:	8c 93       	st	X, r24
     a9a:	07 c0       	rjmp	.+14     	; 0xaaa <__vector_19+0x52>
    }
    else                                                                              /* Else there's no data into buffer */
        #if defined(__AVR_ATmega328P__)
        *this->ucsrb &= ~(1 << UDRIE);                                                /* Disable TX interrupt */
     a9c:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <USART+0x13>
     aa0:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <USART+0x14>
     aa4:	80 81       	ld	r24, Z
     aa6:	8f 7d       	andi	r24, 0xDF	; 223
     aa8:	80 83       	st	Z, r24
************************/
#if defined(__AVR_ATmega328P__)
ISR(USART_UDRE_vect)
{
    USART.txIRQ();
}
     aaa:	ff 91       	pop	r31
     aac:	ef 91       	pop	r30
     aae:	bf 91       	pop	r27
     ab0:	af 91       	pop	r26
     ab2:	9f 91       	pop	r25
     ab4:	8f 91       	pop	r24
     ab6:	2f 91       	pop	r18
     ab8:	0f 90       	pop	r0
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	0f 90       	pop	r0
     abe:	1f 90       	pop	r1
     ac0:	18 95       	reti

00000ac2 <_GLOBAL__sub_I__ZN9__USART__C2EPVhS1_S1_S1_S1_S1_>:
     ac2:	6f ef       	ldi	r22, 0xFF	; 255
     ac4:	7f ef       	ldi	r23, 0xFF	; 255
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z41__static_initialization_and_destruction_0ii>
     ace:	08 95       	ret

00000ad0 <_GLOBAL__sub_D__ZN9__USART__C2EPVhS1_S1_S1_S1_S1_>:
     ad0:	6f ef       	ldi	r22, 0xFF	; 255
     ad2:	7f ef       	ldi	r23, 0xFF	; 255
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z41__static_initialization_and_destruction_0ii>
     adc:	08 95       	ret

00000ade <_ZN7ADS1115C1EP7__TWI__h>:
#include "ADS1115.h"

ADS1115::ADS1115(__TWI__* twi, const uint8_t address)
{
    this->twi = twi;
     ade:	fc 01       	movw	r30, r24
     ae0:	71 83       	std	Z+1, r23	; 0x01
     ae2:	60 83       	st	Z, r22
    this->address = address;
     ae4:	44 83       	std	Z+4, r20	; 0x04
     ae6:	08 95       	ret

00000ae8 <_ZN7ADS111511isConnectedEv>:

    return (1);
}

uint8_t ADS1115::isConnected(void)
{
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	ec 01       	movw	r28, r24
    uint8_t state = this->twi->beginTransmission(address);
     af0:	6c 81       	ldd	r22, Y+4	; 0x04
     af2:	88 81       	ld	r24, Y
     af4:	99 81       	ldd	r25, Y+1	; 0x01
     af6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN7__TWI__17beginTransmissionEh>
     afa:	18 2f       	mov	r17, r24
    this->twi->endTransmission();
     afc:	88 81       	ld	r24, Y
     afe:	99 81       	ldd	r25, Y+1	; 0x01
     b00:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN7__TWI__15endTransmissionEv>
    return (state);
}
     b04:	81 2f       	mov	r24, r17
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	08 95       	ret

00000b0e <_ZN7ADS111511setDataRateENS_11data_rate_tE>:

void ADS1115::setDataRate(data_rate_t rate)
{
    this->config = this->config & ~((1 << ADS1115_DR2) | (1 << ADS1115_DR1) | (1 << ADS1115_DR0)); /* Clear data rate bits */
     b0e:	fc 01       	movw	r30, r24
     b10:	22 81       	ldd	r18, Z+2	; 0x02
     b12:	33 81       	ldd	r19, Z+3	; 0x03
     b14:	2f 71       	andi	r18, 0x1F	; 31
    this->config |= (rate << ADS1115_DR0);
     b16:	f0 e2       	ldi	r31, 0x20	; 32
     b18:	6f 9f       	mul	r22, r31
     b1a:	b0 01       	movw	r22, r0
     b1c:	11 24       	eor	r1, r1
     b1e:	62 2b       	or	r22, r18
     b20:	73 2b       	or	r23, r19
     b22:	fc 01       	movw	r30, r24
     b24:	73 83       	std	Z+3, r23	; 0x03
     b26:	62 83       	std	Z+2, r22	; 0x02
     b28:	08 95       	ret

00000b2a <_ZN7ADS11155beginEv>:
    this->twi = twi;
    this->address = address;
}

uint8_t ADS1115::begin(void)
{
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	ec 01       	movw	r28, r24
    this->twi->begin();
     b30:	88 81       	ld	r24, Y
     b32:	99 81       	ldd	r25, Y+1	; 0x01
     b34:	0e 94 b2 01 	call	0x364	; 0x364 <_ZN7__TWI__5beginEv>
    if (!this->isConnected()) return (0);
     b38:	ce 01       	movw	r24, r28
     b3a:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN7ADS111511isConnectedEv>
     b3e:	88 23       	and	r24, r24
     b40:	19 f1       	breq	.+70     	; 0xb88 <_ZN7ADS11155beginEv+0x5e>

    this->setDataRate(DATA_RATE860);
     b42:	67 e0       	ldi	r22, 0x07	; 7
     b44:	ce 01       	movw	r24, r28
     b46:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN7ADS111511setDataRateENS_11data_rate_tE>

    this->config |= (1 << ADS1115_PGA1) | (1 << ADS1115_MODE) | (1 << ADS1115_CMPQ1) | (1 << ADS1115_CMPQ0);
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	9b 81       	ldd	r25, Y+3	; 0x03
     b4e:	83 60       	ori	r24, 0x03	; 3
     b50:	95 60       	ori	r25, 0x05	; 5
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
    this->twi->beginTransmission(this->address); /* Begin transmission to address */
     b56:	6c 81       	ldd	r22, Y+4	; 0x04
     b58:	88 81       	ld	r24, Y
     b5a:	99 81       	ldd	r25, Y+1	; 0x01
     b5c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN7__TWI__17beginTransmissionEh>
    this->twi->write(ADS1115_CONFR);             /* Access conversion register */
     b60:	61 e0       	ldi	r22, 0x01	; 1
     b62:	88 81       	ld	r24, Y
     b64:	99 81       	ldd	r25, Y+1	; 0x01
     b66:	0e 94 8d 02 	call	0x51a	; 0x51a <_ZN7__TWI__5writeEh>
    this->twi->write((uint8_t)(config >> 8));    /* Write LSB */
     b6a:	6b 81       	ldd	r22, Y+3	; 0x03
     b6c:	88 81       	ld	r24, Y
     b6e:	99 81       	ldd	r25, Y+1	; 0x01
     b70:	0e 94 8d 02 	call	0x51a	; 0x51a <_ZN7__TWI__5writeEh>
    this->twi->write((uint8_t)config);           /* Write MSB */
     b74:	6a 81       	ldd	r22, Y+2	; 0x02
     b76:	88 81       	ld	r24, Y
     b78:	99 81       	ldd	r25, Y+1	; 0x01
     b7a:	0e 94 8d 02 	call	0x51a	; 0x51a <_ZN7__TWI__5writeEh>
    this->twi->endTransmission();                /* End trnasmission to address */
     b7e:	88 81       	ld	r24, Y
     b80:	99 81       	ldd	r25, Y+1	; 0x01
     b82:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN7__TWI__15endTransmissionEv>

    return (1);
     b86:	81 e0       	ldi	r24, 0x01	; 1
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <_ZN7ADS111510setChannelEh>:
    this->config = this->config & ~((1 << ADS1115_DR2) | (1 << ADS1115_DR1) | (1 << ADS1115_DR0)); /* Clear data rate bits */
    this->config |= (rate << ADS1115_DR0);
}

void ADS1115::setChannel(uint8_t channel)
{
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	ec 01       	movw	r28, r24
    channel %= 4;
     b94:	63 70       	andi	r22, 0x03	; 3
    this->config &= ~((1 << ADS1115_MUX2) | (1 << ADS1115_MUX1) | (1 << ADS1115_MUX0)); /* Clear MUX bits */
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	9b 81       	ldd	r25, Y+3	; 0x03
     b9a:	9f 78       	andi	r25, 0x8F	; 143
    channel += 4;                                                                       /* Offset channel becuase first 4 channels are for comparator */
     b9c:	6c 5f       	subi	r22, 0xFC	; 252
    this->config |= (channel << ADS1115_MUX0);
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	76 2f       	mov	r23, r22
     ba2:	66 27       	eor	r22, r22
     ba4:	72 95       	swap	r23
     ba6:	70 7f       	andi	r23, 0xF0	; 240
     ba8:	68 2b       	or	r22, r24
     baa:	79 2b       	or	r23, r25

    this->config |= (1 << ADS1115_OS);
     bac:	70 68       	ori	r23, 0x80	; 128
     bae:	7b 83       	std	Y+3, r23	; 0x03
     bb0:	6a 83       	std	Y+2, r22	; 0x02
    this->twi->beginTransmission(this->address); /* Begin transmission to address */
     bb2:	6c 81       	ldd	r22, Y+4	; 0x04
     bb4:	88 81       	ld	r24, Y
     bb6:	99 81       	ldd	r25, Y+1	; 0x01
     bb8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN7__TWI__17beginTransmissionEh>
    this->twi->write(ADS1115_CONFR);             /* Access conversion register */
     bbc:	61 e0       	ldi	r22, 0x01	; 1
     bbe:	88 81       	ld	r24, Y
     bc0:	99 81       	ldd	r25, Y+1	; 0x01
     bc2:	0e 94 8d 02 	call	0x51a	; 0x51a <_ZN7__TWI__5writeEh>
    this->twi->write((uint8_t)(config >> 8));    /* Write LSB */
     bc6:	6b 81       	ldd	r22, Y+3	; 0x03
     bc8:	88 81       	ld	r24, Y
     bca:	99 81       	ldd	r25, Y+1	; 0x01
     bcc:	0e 94 8d 02 	call	0x51a	; 0x51a <_ZN7__TWI__5writeEh>
    this->twi->write((uint8_t)config);           /* Write MSB */
     bd0:	6a 81       	ldd	r22, Y+2	; 0x02
     bd2:	88 81       	ld	r24, Y
     bd4:	99 81       	ldd	r25, Y+1	; 0x01
     bd6:	0e 94 8d 02 	call	0x51a	; 0x51a <_ZN7__TWI__5writeEh>
    this->twi->endTransmission();                /* End trnasmission to address */
     bda:	88 81       	ld	r24, Y
     bdc:	99 81       	ldd	r25, Y+1	; 0x01
     bde:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN7__TWI__15endTransmissionEv>
}
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	08 95       	ret

00000be8 <_ZN7ADS111512isConvertingEv>:

uint8_t ADS1115::isConverting(void)
{
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	ec 01       	movw	r28, r24
    this->twi->beginTransmission(this->address);                                   /* Begin transmission to address */
     bf2:	6c 81       	ldd	r22, Y+4	; 0x04
     bf4:	88 81       	ld	r24, Y
     bf6:	99 81       	ldd	r25, Y+1	; 0x01
     bf8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN7__TWI__17beginTransmissionEh>
    this->twi->write(ADS1115_CONFR);                                               /* Access conversion register */
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	88 81       	ld	r24, Y
     c00:	99 81       	ldd	r25, Y+1	; 0x01
     c02:	0e 94 8d 02 	call	0x51a	; 0x51a <_ZN7__TWI__5writeEh>
    if (this->twi->requestFrom(this->address, 2) != 2) return (0);                 /* Request data and check if data can be received */ 
     c06:	42 e0       	ldi	r20, 0x02	; 2
     c08:	6c 81       	ldd	r22, Y+4	; 0x04
     c0a:	88 81       	ld	r24, Y
     c0c:	99 81       	ldd	r25, Y+1	; 0x01
     c0e:	0e 94 c3 02 	call	0x586	; 0x586 <_ZN7__TWI__11requestFromEhh>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	c9 f4       	brne	.+50     	; 0xc48 <_ZN7ADS111512isConvertingEv+0x60>
    this->config = ((uint8_t)this->twi->read() << 8) | (uint8_t)this->twi->read(); /* Read data from ADC */
     c16:	88 81       	ld	r24, Y
     c18:	99 81       	ldd	r25, Y+1	; 0x01
     c1a:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7__TWI__4readEv>
     c1e:	08 2f       	mov	r16, r24
     c20:	10 e0       	ldi	r17, 0x00	; 0
     c22:	10 2f       	mov	r17, r16
     c24:	00 27       	eor	r16, r16
     c26:	88 81       	ld	r24, Y
     c28:	99 81       	ldd	r25, Y+1	; 0x01
     c2a:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7__TWI__4readEv>
     c2e:	08 2b       	or	r16, r24
     c30:	1b 83       	std	Y+3, r17	; 0x03
     c32:	0a 83       	std	Y+2, r16	; 0x02
    this->twi->endTransmission();                                                  /* End trnasmission to address */
     c34:	88 81       	ld	r24, Y
     c36:	99 81       	ldd	r25, Y+1	; 0x01
     c38:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN7__TWI__15endTransmissionEv>

    return (((this->config >> ADS1115_OS) & 1) == 0);
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	80 95       	com	r24
     c40:	88 1f       	adc	r24, r24
     c42:	88 27       	eor	r24, r24
     c44:	88 1f       	adc	r24, r24
     c46:	01 c0       	rjmp	.+2      	; 0xc4a <_ZN7ADS111512isConvertingEv+0x62>

uint8_t ADS1115::isConverting(void)
{
    this->twi->beginTransmission(this->address);                                   /* Begin transmission to address */
    this->twi->write(ADS1115_CONFR);                                               /* Access conversion register */
    if (this->twi->requestFrom(this->address, 2) != 2) return (0);                 /* Request data and check if data can be received */ 
     c48:	80 e0       	ldi	r24, 0x00	; 0
    this->config = ((uint8_t)this->twi->read() << 8) | (uint8_t)this->twi->read(); /* Read data from ADC */
    this->twi->endTransmission();                                                  /* End trnasmission to address */

    return (((this->config >> ADS1115_OS) & 1) == 0);
}
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	08 95       	ret

00000c54 <_ZN7ADS11154readEv>:

int16_t ADS1115::read(void)
{
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	ec 01       	movw	r28, r24
    while (this->isConverting());
     c5e:	ce 01       	movw	r24, r28
     c60:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_ZN7ADS111512isConvertingEv>
     c64:	81 11       	cpse	r24, r1
     c66:	fb cf       	rjmp	.-10     	; 0xc5e <_ZN7ADS11154readEv+0xa>

    this->twi->beginTransmission(this->address);                                   /* Begin transmission to address */
     c68:	6c 81       	ldd	r22, Y+4	; 0x04
     c6a:	88 81       	ld	r24, Y
     c6c:	99 81       	ldd	r25, Y+1	; 0x01
     c6e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN7__TWI__17beginTransmissionEh>
    this->twi->write(ADS1115_CONVR);                                               /* Access conversion register */
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	88 81       	ld	r24, Y
     c76:	99 81       	ldd	r25, Y+1	; 0x01
     c78:	0e 94 8d 02 	call	0x51a	; 0x51a <_ZN7__TWI__5writeEh>
    if (this->twi->requestFrom(this->address, 2) != 2) return (0);                 /* Request data and check if data can be received */ 
     c7c:	42 e0       	ldi	r20, 0x02	; 2
     c7e:	6c 81       	ldd	r22, Y+4	; 0x04
     c80:	88 81       	ld	r24, Y
     c82:	99 81       	ldd	r25, Y+1	; 0x01
     c84:	0e 94 c3 02 	call	0x586	; 0x586 <_ZN7__TWI__11requestFromEhh>
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	a1 f4       	brne	.+40     	; 0xcb4 <_ZN7ADS11154readEv+0x60>
    int16_t data = ((uint8_t)this->twi->read() << 8) | (uint8_t)this->twi->read(); /* Read data from ADC */
     c8c:	88 81       	ld	r24, Y
     c8e:	99 81       	ldd	r25, Y+1	; 0x01
     c90:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7__TWI__4readEv>
     c94:	08 2f       	mov	r16, r24
     c96:	10 e0       	ldi	r17, 0x00	; 0
     c98:	10 2f       	mov	r17, r16
     c9a:	00 27       	eor	r16, r16
     c9c:	88 81       	ld	r24, Y
     c9e:	99 81       	ldd	r25, Y+1	; 0x01
     ca0:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7__TWI__4readEv>
     ca4:	08 2b       	or	r16, r24
    this->twi->endTransmission();                                                  /* End trnasmission to address */
     ca6:	88 81       	ld	r24, Y
     ca8:	99 81       	ldd	r25, Y+1	; 0x01
     caa:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN7__TWI__15endTransmissionEv>
    return (data);
     cae:	80 2f       	mov	r24, r16
     cb0:	91 2f       	mov	r25, r17
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <_ZN7ADS11154readEv+0x64>
{
    while (this->isConverting());

    this->twi->beginTransmission(this->address);                                   /* Begin transmission to address */
    this->twi->write(ADS1115_CONVR);                                               /* Access conversion register */
    if (this->twi->requestFrom(this->address, 2) != 2) return (0);                 /* Request data and check if data can be received */ 
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
    int16_t data = ((uint8_t)this->twi->read() << 8) | (uint8_t)this->twi->read(); /* Read data from ADC */
    this->twi->endTransmission();                                                  /* End trnasmission to address */
    return (data);
}
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	08 95       	ret

00000cc2 <_ZN7ADS11154readEh>:

int16_t ADS1115::read(uint8_t channel)
{
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	ec 01       	movw	r28, r24
    this->setChannel(channel);
     cc8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_ZN7ADS111510setChannelEh>
    return (this->read());
     ccc:	ce 01       	movw	r24, r28
     cce:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN7ADS11154readEv>
}
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	08 95       	ret

00000cd8 <_Z41__static_initialization_and_destruction_0ii>:
        for (uint8_t i = 0; i< 4; i++)
            USART.printf("ADC[%hhu]: %d\n", i, ads.read(i));
        USART.println();
        Time.delayMillis(1000);
    }
}
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	51 f4       	brne	.+20     	; 0xcf0 <_Z41__static_initialization_and_destruction_0ii+0x18>
     cdc:	6f 3f       	cpi	r22, 0xFF	; 255
     cde:	7f 4f       	sbci	r23, 0xFF	; 255
     ce0:	39 f4       	brne	.+14     	; 0xcf0 <_Z41__static_initialization_and_destruction_0ii+0x18>

#include "ADS1115/ADS1115.h"
#include "USART/USART.h"
#include "Time/Time.h"

ADS1115 ads(&TWI, 0x48);
     ce2:	48 e4       	ldi	r20, 0x48	; 72
     ce4:	65 e2       	ldi	r22, 0x25	; 37
     ce6:	71 e0       	ldi	r23, 0x01	; 1
     ce8:	8f e4       	ldi	r24, 0x4F	; 79
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	0e 94 6f 05 	call	0xade	; 0xade <_ZN7ADS1115C1EP7__TWI__h>
     cf0:	08 95       	ret

00000cf2 <main>:

int main(void)
{
    USART.begin(9600);
     cf2:	40 e8       	ldi	r20, 0x80	; 128
     cf4:	55 e2       	ldi	r21, 0x25	; 37
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	86 e3       	ldi	r24, 0x36	; 54
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	0e 94 0f 04 	call	0x81e	; 0x81e <_ZN9__USART__5beginEm>
    Time.begin();
     d02:	86 e1       	ldi	r24, 0x16	; 22
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN8__Time__5beginEv>
    USART.printP(PSTR("ADS1115 Reading ADC example code\n"));
     d0a:	6e e8       	ldi	r22, 0x8E	; 142
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	86 e3       	ldi	r24, 0x36	; 54
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN9__USART__6printPEPKc>
    if (ads.begin())
     d16:	8f e4       	ldi	r24, 0x4F	; 79
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	0e 94 95 05 	call	0xb2a	; 0xb2a <_ZN7ADS11155beginEv>
     d1e:	88 23       	and	r24, r24
     d20:	39 f0       	breq	.+14     	; 0xd30 <main+0x3e>
        USART.printP(PSTR("ADS1115 working\n"));
     d22:	6d e7       	ldi	r22, 0x7D	; 125
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	86 e3       	ldi	r24, 0x36	; 54
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN9__USART__6printPEPKc>
     d2e:	07 c0       	rjmp	.+14     	; 0xd3e <main+0x4c>
    else
    {
        USART.printP(PSTR("ADS1115 not working\n"));
     d30:	68 e6       	ldi	r22, 0x68	; 104
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	86 e3       	ldi	r24, 0x36	; 54
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN9__USART__6printPEPKc>
     d3c:	ff cf       	rjmp	.-2      	; 0xd3c <main+0x4a>
        void    write    (const uint8_t* array);
        void    print    (const char byte) {__USART__::write((uint8_t)byte);}
        void    print    (const char* array) {__USART__::write((const uint8_t*)array);}
        void    printf   (const char* array, ...);
        void    printP   (const char* array);
        void    println  (void) {__USART__::write('\n');}
     d3e:	6a e0       	ldi	r22, 0x0A	; 10
     d40:	86 e3       	ldi	r24, 0x36	; 54
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN9__USART__5writeEh>
        while(1);
    }
    while (1) 
    {
        USART.println();
        for (uint8_t i = 0; i< 4; i++)
     d48:	c0 e0       	ldi	r28, 0x00	; 0
     d4a:	c4 30       	cpi	r28, 0x04	; 4
     d4c:	e8 f4       	brcc	.+58     	; 0xd88 <main+0x96>
            USART.printf("ADC[%hhu]: %d\n", i, ads.read(i));
     d4e:	6c 2f       	mov	r22, r28
     d50:	8f e4       	ldi	r24, 0x4F	; 79
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_ZN7ADS11154readEh>
     d58:	9f 93       	push	r25
     d5a:	8f 93       	push	r24
     d5c:	1f 92       	push	r1
     d5e:	cf 93       	push	r28
     d60:	86 e0       	ldi	r24, 0x06	; 6
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	9f 93       	push	r25
     d66:	8f 93       	push	r24
     d68:	86 e3       	ldi	r24, 0x36	; 54
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	9f 93       	push	r25
     d6e:	8f 93       	push	r24
     d70:	0e 94 b7 04 	call	0x96e	; 0x96e <_ZN9__USART__6printfEPKcz>
        while(1);
    }
    while (1) 
    {
        USART.println();
        for (uint8_t i = 0; i< 4; i++)
     d74:	cf 5f       	subi	r28, 0xFF	; 255
     d76:	8d b7       	in	r24, 0x3d	; 61
     d78:	9e b7       	in	r25, 0x3e	; 62
     d7a:	08 96       	adiw	r24, 0x08	; 8
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	9e bf       	out	0x3e, r25	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	8d bf       	out	0x3d, r24	; 61
     d86:	e1 cf       	rjmp	.-62     	; 0xd4a <main+0x58>
     d88:	6a e0       	ldi	r22, 0x0A	; 10
     d8a:	86 e3       	ldi	r24, 0x36	; 54
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN9__USART__5writeEh>
            USART.printf("ADC[%hhu]: %d\n", i, ads.read(i));
        USART.println();
        Time.delayMillis(1000);
     d92:	48 ee       	ldi	r20, 0xE8	; 232
     d94:	53 e0       	ldi	r21, 0x03	; 3
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	86 e1       	ldi	r24, 0x16	; 22
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN8__Time__11delayMillisEm>
    else
    {
        USART.printP(PSTR("ADS1115 not working\n"));
        while(1);
    }
    while (1) 
     da2:	cd cf       	rjmp	.-102    	; 0xd3e <main+0x4c>

00000da4 <_GLOBAL__sub_I_ads>:
        for (uint8_t i = 0; i< 4; i++)
            USART.printf("ADC[%hhu]: %d\n", i, ads.read(i));
        USART.println();
        Time.delayMillis(1000);
    }
}
     da4:	6f ef       	ldi	r22, 0xFF	; 255
     da6:	7f ef       	ldi	r23, 0xFF	; 255
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <_Z41__static_initialization_and_destruction_0ii>
     db0:	08 95       	ret

00000db2 <__subsf3>:
     db2:	50 58       	subi	r21, 0x80	; 128

00000db4 <__addsf3>:
     db4:	bb 27       	eor	r27, r27
     db6:	aa 27       	eor	r26, r26
     db8:	0e 94 f1 06 	call	0xde2	; 0xde2 <__addsf3x>
     dbc:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__fp_round>
     dc0:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__fp_pscA>
     dc4:	38 f0       	brcs	.+14     	; 0xdd4 <__addsf3+0x20>
     dc6:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fp_pscB>
     dca:	20 f0       	brcs	.+8      	; 0xdd4 <__addsf3+0x20>
     dcc:	39 f4       	brne	.+14     	; 0xddc <__addsf3+0x28>
     dce:	9f 3f       	cpi	r25, 0xFF	; 255
     dd0:	19 f4       	brne	.+6      	; 0xdd8 <__addsf3+0x24>
     dd2:	26 f4       	brtc	.+8      	; 0xddc <__addsf3+0x28>
     dd4:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_nan>
     dd8:	0e f4       	brtc	.+2      	; 0xddc <__addsf3+0x28>
     dda:	e0 95       	com	r30
     ddc:	e7 fb       	bst	r30, 7
     dde:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_inf>

00000de2 <__addsf3x>:
     de2:	e9 2f       	mov	r30, r25
     de4:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__fp_split3>
     de8:	58 f3       	brcs	.-42     	; 0xdc0 <__addsf3+0xc>
     dea:	ba 17       	cp	r27, r26
     dec:	62 07       	cpc	r22, r18
     dee:	73 07       	cpc	r23, r19
     df0:	84 07       	cpc	r24, r20
     df2:	95 07       	cpc	r25, r21
     df4:	20 f0       	brcs	.+8      	; 0xdfe <__addsf3x+0x1c>
     df6:	79 f4       	brne	.+30     	; 0xe16 <__addsf3x+0x34>
     df8:	a6 f5       	brtc	.+104    	; 0xe62 <__addsf3x+0x80>
     dfa:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__fp_zero>
     dfe:	0e f4       	brtc	.+2      	; 0xe02 <__addsf3x+0x20>
     e00:	e0 95       	com	r30
     e02:	0b 2e       	mov	r0, r27
     e04:	ba 2f       	mov	r27, r26
     e06:	a0 2d       	mov	r26, r0
     e08:	0b 01       	movw	r0, r22
     e0a:	b9 01       	movw	r22, r18
     e0c:	90 01       	movw	r18, r0
     e0e:	0c 01       	movw	r0, r24
     e10:	ca 01       	movw	r24, r20
     e12:	a0 01       	movw	r20, r0
     e14:	11 24       	eor	r1, r1
     e16:	ff 27       	eor	r31, r31
     e18:	59 1b       	sub	r21, r25
     e1a:	99 f0       	breq	.+38     	; 0xe42 <__addsf3x+0x60>
     e1c:	59 3f       	cpi	r21, 0xF9	; 249
     e1e:	50 f4       	brcc	.+20     	; 0xe34 <__addsf3x+0x52>
     e20:	50 3e       	cpi	r21, 0xE0	; 224
     e22:	68 f1       	brcs	.+90     	; 0xe7e <__addsf3x+0x9c>
     e24:	1a 16       	cp	r1, r26
     e26:	f0 40       	sbci	r31, 0x00	; 0
     e28:	a2 2f       	mov	r26, r18
     e2a:	23 2f       	mov	r18, r19
     e2c:	34 2f       	mov	r19, r20
     e2e:	44 27       	eor	r20, r20
     e30:	58 5f       	subi	r21, 0xF8	; 248
     e32:	f3 cf       	rjmp	.-26     	; 0xe1a <__addsf3x+0x38>
     e34:	46 95       	lsr	r20
     e36:	37 95       	ror	r19
     e38:	27 95       	ror	r18
     e3a:	a7 95       	ror	r26
     e3c:	f0 40       	sbci	r31, 0x00	; 0
     e3e:	53 95       	inc	r21
     e40:	c9 f7       	brne	.-14     	; 0xe34 <__addsf3x+0x52>
     e42:	7e f4       	brtc	.+30     	; 0xe62 <__addsf3x+0x80>
     e44:	1f 16       	cp	r1, r31
     e46:	ba 0b       	sbc	r27, r26
     e48:	62 0b       	sbc	r22, r18
     e4a:	73 0b       	sbc	r23, r19
     e4c:	84 0b       	sbc	r24, r20
     e4e:	ba f0       	brmi	.+46     	; 0xe7e <__addsf3x+0x9c>
     e50:	91 50       	subi	r25, 0x01	; 1
     e52:	a1 f0       	breq	.+40     	; 0xe7c <__addsf3x+0x9a>
     e54:	ff 0f       	add	r31, r31
     e56:	bb 1f       	adc	r27, r27
     e58:	66 1f       	adc	r22, r22
     e5a:	77 1f       	adc	r23, r23
     e5c:	88 1f       	adc	r24, r24
     e5e:	c2 f7       	brpl	.-16     	; 0xe50 <__addsf3x+0x6e>
     e60:	0e c0       	rjmp	.+28     	; 0xe7e <__addsf3x+0x9c>
     e62:	ba 0f       	add	r27, r26
     e64:	62 1f       	adc	r22, r18
     e66:	73 1f       	adc	r23, r19
     e68:	84 1f       	adc	r24, r20
     e6a:	48 f4       	brcc	.+18     	; 0xe7e <__addsf3x+0x9c>
     e6c:	87 95       	ror	r24
     e6e:	77 95       	ror	r23
     e70:	67 95       	ror	r22
     e72:	b7 95       	ror	r27
     e74:	f7 95       	ror	r31
     e76:	9e 3f       	cpi	r25, 0xFE	; 254
     e78:	08 f0       	brcs	.+2      	; 0xe7c <__addsf3x+0x9a>
     e7a:	b0 cf       	rjmp	.-160    	; 0xddc <__addsf3+0x28>
     e7c:	93 95       	inc	r25
     e7e:	88 0f       	add	r24, r24
     e80:	08 f0       	brcs	.+2      	; 0xe84 <__addsf3x+0xa2>
     e82:	99 27       	eor	r25, r25
     e84:	ee 0f       	add	r30, r30
     e86:	97 95       	ror	r25
     e88:	87 95       	ror	r24
     e8a:	08 95       	ret

00000e8c <__cmpsf2>:
     e8c:	0e 94 30 08 	call	0x1060	; 0x1060 <__fp_cmp>
     e90:	08 f4       	brcc	.+2      	; 0xe94 <__cmpsf2+0x8>
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	08 95       	ret

00000e96 <__divsf3>:
     e96:	0e 94 5f 07 	call	0xebe	; 0xebe <__divsf3x>
     e9a:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__fp_round>
     e9e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fp_pscB>
     ea2:	58 f0       	brcs	.+22     	; 0xeba <__divsf3+0x24>
     ea4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__fp_pscA>
     ea8:	40 f0       	brcs	.+16     	; 0xeba <__divsf3+0x24>
     eaa:	29 f4       	brne	.+10     	; 0xeb6 <__divsf3+0x20>
     eac:	5f 3f       	cpi	r21, 0xFF	; 255
     eae:	29 f0       	breq	.+10     	; 0xeba <__divsf3+0x24>
     eb0:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_inf>
     eb4:	51 11       	cpse	r21, r1
     eb6:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_szero>
     eba:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_nan>

00000ebe <__divsf3x>:
     ebe:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__fp_split3>
     ec2:	68 f3       	brcs	.-38     	; 0xe9e <__divsf3+0x8>

00000ec4 <__divsf3_pse>:
     ec4:	99 23       	and	r25, r25
     ec6:	b1 f3       	breq	.-20     	; 0xeb4 <__divsf3+0x1e>
     ec8:	55 23       	and	r21, r21
     eca:	91 f3       	breq	.-28     	; 0xeb0 <__divsf3+0x1a>
     ecc:	95 1b       	sub	r25, r21
     ece:	55 0b       	sbc	r21, r21
     ed0:	bb 27       	eor	r27, r27
     ed2:	aa 27       	eor	r26, r26
     ed4:	62 17       	cp	r22, r18
     ed6:	73 07       	cpc	r23, r19
     ed8:	84 07       	cpc	r24, r20
     eda:	38 f0       	brcs	.+14     	; 0xeea <__divsf3_pse+0x26>
     edc:	9f 5f       	subi	r25, 0xFF	; 255
     ede:	5f 4f       	sbci	r21, 0xFF	; 255
     ee0:	22 0f       	add	r18, r18
     ee2:	33 1f       	adc	r19, r19
     ee4:	44 1f       	adc	r20, r20
     ee6:	aa 1f       	adc	r26, r26
     ee8:	a9 f3       	breq	.-22     	; 0xed4 <__divsf3_pse+0x10>
     eea:	35 d0       	rcall	.+106    	; 0xf56 <__divsf3_pse+0x92>
     eec:	0e 2e       	mov	r0, r30
     eee:	3a f0       	brmi	.+14     	; 0xefe <__divsf3_pse+0x3a>
     ef0:	e0 e8       	ldi	r30, 0x80	; 128
     ef2:	32 d0       	rcall	.+100    	; 0xf58 <__divsf3_pse+0x94>
     ef4:	91 50       	subi	r25, 0x01	; 1
     ef6:	50 40       	sbci	r21, 0x00	; 0
     ef8:	e6 95       	lsr	r30
     efa:	00 1c       	adc	r0, r0
     efc:	ca f7       	brpl	.-14     	; 0xef0 <__divsf3_pse+0x2c>
     efe:	2b d0       	rcall	.+86     	; 0xf56 <__divsf3_pse+0x92>
     f00:	fe 2f       	mov	r31, r30
     f02:	29 d0       	rcall	.+82     	; 0xf56 <__divsf3_pse+0x92>
     f04:	66 0f       	add	r22, r22
     f06:	77 1f       	adc	r23, r23
     f08:	88 1f       	adc	r24, r24
     f0a:	bb 1f       	adc	r27, r27
     f0c:	26 17       	cp	r18, r22
     f0e:	37 07       	cpc	r19, r23
     f10:	48 07       	cpc	r20, r24
     f12:	ab 07       	cpc	r26, r27
     f14:	b0 e8       	ldi	r27, 0x80	; 128
     f16:	09 f0       	breq	.+2      	; 0xf1a <__divsf3_pse+0x56>
     f18:	bb 0b       	sbc	r27, r27
     f1a:	80 2d       	mov	r24, r0
     f1c:	bf 01       	movw	r22, r30
     f1e:	ff 27       	eor	r31, r31
     f20:	93 58       	subi	r25, 0x83	; 131
     f22:	5f 4f       	sbci	r21, 0xFF	; 255
     f24:	3a f0       	brmi	.+14     	; 0xf34 <__divsf3_pse+0x70>
     f26:	9e 3f       	cpi	r25, 0xFE	; 254
     f28:	51 05       	cpc	r21, r1
     f2a:	78 f0       	brcs	.+30     	; 0xf4a <__divsf3_pse+0x86>
     f2c:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_inf>
     f30:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_szero>
     f34:	5f 3f       	cpi	r21, 0xFF	; 255
     f36:	e4 f3       	brlt	.-8      	; 0xf30 <__divsf3_pse+0x6c>
     f38:	98 3e       	cpi	r25, 0xE8	; 232
     f3a:	d4 f3       	brlt	.-12     	; 0xf30 <__divsf3_pse+0x6c>
     f3c:	86 95       	lsr	r24
     f3e:	77 95       	ror	r23
     f40:	67 95       	ror	r22
     f42:	b7 95       	ror	r27
     f44:	f7 95       	ror	r31
     f46:	9f 5f       	subi	r25, 0xFF	; 255
     f48:	c9 f7       	brne	.-14     	; 0xf3c <__divsf3_pse+0x78>
     f4a:	88 0f       	add	r24, r24
     f4c:	91 1d       	adc	r25, r1
     f4e:	96 95       	lsr	r25
     f50:	87 95       	ror	r24
     f52:	97 f9       	bld	r25, 7
     f54:	08 95       	ret
     f56:	e1 e0       	ldi	r30, 0x01	; 1
     f58:	66 0f       	add	r22, r22
     f5a:	77 1f       	adc	r23, r23
     f5c:	88 1f       	adc	r24, r24
     f5e:	bb 1f       	adc	r27, r27
     f60:	62 17       	cp	r22, r18
     f62:	73 07       	cpc	r23, r19
     f64:	84 07       	cpc	r24, r20
     f66:	ba 07       	cpc	r27, r26
     f68:	20 f0       	brcs	.+8      	; 0xf72 <__divsf3_pse+0xae>
     f6a:	62 1b       	sub	r22, r18
     f6c:	73 0b       	sbc	r23, r19
     f6e:	84 0b       	sbc	r24, r20
     f70:	ba 0b       	sbc	r27, r26
     f72:	ee 1f       	adc	r30, r30
     f74:	88 f7       	brcc	.-30     	; 0xf58 <__divsf3_pse+0x94>
     f76:	e0 95       	com	r30
     f78:	08 95       	ret

00000f7a <__fixsfsi>:
     f7a:	0e 94 c4 07 	call	0xf88	; 0xf88 <__fixunssfsi>
     f7e:	68 94       	set
     f80:	b1 11       	cpse	r27, r1
     f82:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_szero>
     f86:	08 95       	ret

00000f88 <__fixunssfsi>:
     f88:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_splitA>
     f8c:	88 f0       	brcs	.+34     	; 0xfb0 <__fixunssfsi+0x28>
     f8e:	9f 57       	subi	r25, 0x7F	; 127
     f90:	98 f0       	brcs	.+38     	; 0xfb8 <__fixunssfsi+0x30>
     f92:	b9 2f       	mov	r27, r25
     f94:	99 27       	eor	r25, r25
     f96:	b7 51       	subi	r27, 0x17	; 23
     f98:	b0 f0       	brcs	.+44     	; 0xfc6 <__fixunssfsi+0x3e>
     f9a:	e1 f0       	breq	.+56     	; 0xfd4 <__fixunssfsi+0x4c>
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	88 1f       	adc	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	1a f0       	brmi	.+6      	; 0xfac <__fixunssfsi+0x24>
     fa6:	ba 95       	dec	r27
     fa8:	c9 f7       	brne	.-14     	; 0xf9c <__fixunssfsi+0x14>
     faa:	14 c0       	rjmp	.+40     	; 0xfd4 <__fixunssfsi+0x4c>
     fac:	b1 30       	cpi	r27, 0x01	; 1
     fae:	91 f0       	breq	.+36     	; 0xfd4 <__fixunssfsi+0x4c>
     fb0:	0e 94 9e 08 	call	0x113c	; 0x113c <__fp_zero>
     fb4:	b1 e0       	ldi	r27, 0x01	; 1
     fb6:	08 95       	ret
     fb8:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__fp_zero>
     fbc:	67 2f       	mov	r22, r23
     fbe:	78 2f       	mov	r23, r24
     fc0:	88 27       	eor	r24, r24
     fc2:	b8 5f       	subi	r27, 0xF8	; 248
     fc4:	39 f0       	breq	.+14     	; 0xfd4 <__fixunssfsi+0x4c>
     fc6:	b9 3f       	cpi	r27, 0xF9	; 249
     fc8:	cc f3       	brlt	.-14     	; 0xfbc <__fixunssfsi+0x34>
     fca:	86 95       	lsr	r24
     fcc:	77 95       	ror	r23
     fce:	67 95       	ror	r22
     fd0:	b3 95       	inc	r27
     fd2:	d9 f7       	brne	.-10     	; 0xfca <__fixunssfsi+0x42>
     fd4:	3e f4       	brtc	.+14     	; 0xfe4 <__fixunssfsi+0x5c>
     fd6:	90 95       	com	r25
     fd8:	80 95       	com	r24
     fda:	70 95       	com	r23
     fdc:	61 95       	neg	r22
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	8f 4f       	sbci	r24, 0xFF	; 255
     fe2:	9f 4f       	sbci	r25, 0xFF	; 255
     fe4:	08 95       	ret

00000fe6 <__floatunsisf>:
     fe6:	e8 94       	clt
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <__floatsisf+0x12>

00000fea <__floatsisf>:
     fea:	97 fb       	bst	r25, 7
     fec:	3e f4       	brtc	.+14     	; 0xffc <__floatsisf+0x12>
     fee:	90 95       	com	r25
     ff0:	80 95       	com	r24
     ff2:	70 95       	com	r23
     ff4:	61 95       	neg	r22
     ff6:	7f 4f       	sbci	r23, 0xFF	; 255
     ff8:	8f 4f       	sbci	r24, 0xFF	; 255
     ffa:	9f 4f       	sbci	r25, 0xFF	; 255
     ffc:	99 23       	and	r25, r25
     ffe:	a9 f0       	breq	.+42     	; 0x102a <__floatsisf+0x40>
    1000:	f9 2f       	mov	r31, r25
    1002:	96 e9       	ldi	r25, 0x96	; 150
    1004:	bb 27       	eor	r27, r27
    1006:	93 95       	inc	r25
    1008:	f6 95       	lsr	r31
    100a:	87 95       	ror	r24
    100c:	77 95       	ror	r23
    100e:	67 95       	ror	r22
    1010:	b7 95       	ror	r27
    1012:	f1 11       	cpse	r31, r1
    1014:	f8 cf       	rjmp	.-16     	; 0x1006 <__floatsisf+0x1c>
    1016:	fa f4       	brpl	.+62     	; 0x1056 <__floatsisf+0x6c>
    1018:	bb 0f       	add	r27, r27
    101a:	11 f4       	brne	.+4      	; 0x1020 <__floatsisf+0x36>
    101c:	60 ff       	sbrs	r22, 0
    101e:	1b c0       	rjmp	.+54     	; 0x1056 <__floatsisf+0x6c>
    1020:	6f 5f       	subi	r22, 0xFF	; 255
    1022:	7f 4f       	sbci	r23, 0xFF	; 255
    1024:	8f 4f       	sbci	r24, 0xFF	; 255
    1026:	9f 4f       	sbci	r25, 0xFF	; 255
    1028:	16 c0       	rjmp	.+44     	; 0x1056 <__floatsisf+0x6c>
    102a:	88 23       	and	r24, r24
    102c:	11 f0       	breq	.+4      	; 0x1032 <__floatsisf+0x48>
    102e:	96 e9       	ldi	r25, 0x96	; 150
    1030:	11 c0       	rjmp	.+34     	; 0x1054 <__floatsisf+0x6a>
    1032:	77 23       	and	r23, r23
    1034:	21 f0       	breq	.+8      	; 0x103e <__floatsisf+0x54>
    1036:	9e e8       	ldi	r25, 0x8E	; 142
    1038:	87 2f       	mov	r24, r23
    103a:	76 2f       	mov	r23, r22
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <__floatsisf+0x5e>
    103e:	66 23       	and	r22, r22
    1040:	71 f0       	breq	.+28     	; 0x105e <__floatsisf+0x74>
    1042:	96 e8       	ldi	r25, 0x86	; 134
    1044:	86 2f       	mov	r24, r22
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	2a f0       	brmi	.+10     	; 0x1056 <__floatsisf+0x6c>
    104c:	9a 95       	dec	r25
    104e:	66 0f       	add	r22, r22
    1050:	77 1f       	adc	r23, r23
    1052:	88 1f       	adc	r24, r24
    1054:	da f7       	brpl	.-10     	; 0x104c <__floatsisf+0x62>
    1056:	88 0f       	add	r24, r24
    1058:	96 95       	lsr	r25
    105a:	87 95       	ror	r24
    105c:	97 f9       	bld	r25, 7
    105e:	08 95       	ret

00001060 <__fp_cmp>:
    1060:	99 0f       	add	r25, r25
    1062:	00 08       	sbc	r0, r0
    1064:	55 0f       	add	r21, r21
    1066:	aa 0b       	sbc	r26, r26
    1068:	e0 e8       	ldi	r30, 0x80	; 128
    106a:	fe ef       	ldi	r31, 0xFE	; 254
    106c:	16 16       	cp	r1, r22
    106e:	17 06       	cpc	r1, r23
    1070:	e8 07       	cpc	r30, r24
    1072:	f9 07       	cpc	r31, r25
    1074:	c0 f0       	brcs	.+48     	; 0x10a6 <__fp_cmp+0x46>
    1076:	12 16       	cp	r1, r18
    1078:	13 06       	cpc	r1, r19
    107a:	e4 07       	cpc	r30, r20
    107c:	f5 07       	cpc	r31, r21
    107e:	98 f0       	brcs	.+38     	; 0x10a6 <__fp_cmp+0x46>
    1080:	62 1b       	sub	r22, r18
    1082:	73 0b       	sbc	r23, r19
    1084:	84 0b       	sbc	r24, r20
    1086:	95 0b       	sbc	r25, r21
    1088:	39 f4       	brne	.+14     	; 0x1098 <__fp_cmp+0x38>
    108a:	0a 26       	eor	r0, r26
    108c:	61 f0       	breq	.+24     	; 0x10a6 <__fp_cmp+0x46>
    108e:	23 2b       	or	r18, r19
    1090:	24 2b       	or	r18, r20
    1092:	25 2b       	or	r18, r21
    1094:	21 f4       	brne	.+8      	; 0x109e <__fp_cmp+0x3e>
    1096:	08 95       	ret
    1098:	0a 26       	eor	r0, r26
    109a:	09 f4       	brne	.+2      	; 0x109e <__fp_cmp+0x3e>
    109c:	a1 40       	sbci	r26, 0x01	; 1
    109e:	a6 95       	lsr	r26
    10a0:	8f ef       	ldi	r24, 0xFF	; 255
    10a2:	81 1d       	adc	r24, r1
    10a4:	81 1d       	adc	r24, r1
    10a6:	08 95       	ret

000010a8 <__fp_inf>:
    10a8:	97 f9       	bld	r25, 7
    10aa:	9f 67       	ori	r25, 0x7F	; 127
    10ac:	80 e8       	ldi	r24, 0x80	; 128
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	08 95       	ret

000010b4 <__fp_nan>:
    10b4:	9f ef       	ldi	r25, 0xFF	; 255
    10b6:	80 ec       	ldi	r24, 0xC0	; 192
    10b8:	08 95       	ret

000010ba <__fp_pscA>:
    10ba:	00 24       	eor	r0, r0
    10bc:	0a 94       	dec	r0
    10be:	16 16       	cp	r1, r22
    10c0:	17 06       	cpc	r1, r23
    10c2:	18 06       	cpc	r1, r24
    10c4:	09 06       	cpc	r0, r25
    10c6:	08 95       	ret

000010c8 <__fp_pscB>:
    10c8:	00 24       	eor	r0, r0
    10ca:	0a 94       	dec	r0
    10cc:	12 16       	cp	r1, r18
    10ce:	13 06       	cpc	r1, r19
    10d0:	14 06       	cpc	r1, r20
    10d2:	05 06       	cpc	r0, r21
    10d4:	08 95       	ret

000010d6 <__fp_round>:
    10d6:	09 2e       	mov	r0, r25
    10d8:	03 94       	inc	r0
    10da:	00 0c       	add	r0, r0
    10dc:	11 f4       	brne	.+4      	; 0x10e2 <__fp_round+0xc>
    10de:	88 23       	and	r24, r24
    10e0:	52 f0       	brmi	.+20     	; 0x10f6 <__fp_round+0x20>
    10e2:	bb 0f       	add	r27, r27
    10e4:	40 f4       	brcc	.+16     	; 0x10f6 <__fp_round+0x20>
    10e6:	bf 2b       	or	r27, r31
    10e8:	11 f4       	brne	.+4      	; 0x10ee <__fp_round+0x18>
    10ea:	60 ff       	sbrs	r22, 0
    10ec:	04 c0       	rjmp	.+8      	; 0x10f6 <__fp_round+0x20>
    10ee:	6f 5f       	subi	r22, 0xFF	; 255
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
    10f2:	8f 4f       	sbci	r24, 0xFF	; 255
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	08 95       	ret

000010f8 <__fp_split3>:
    10f8:	57 fd       	sbrc	r21, 7
    10fa:	90 58       	subi	r25, 0x80	; 128
    10fc:	44 0f       	add	r20, r20
    10fe:	55 1f       	adc	r21, r21
    1100:	59 f0       	breq	.+22     	; 0x1118 <__fp_splitA+0x10>
    1102:	5f 3f       	cpi	r21, 0xFF	; 255
    1104:	71 f0       	breq	.+28     	; 0x1122 <__fp_splitA+0x1a>
    1106:	47 95       	ror	r20

00001108 <__fp_splitA>:
    1108:	88 0f       	add	r24, r24
    110a:	97 fb       	bst	r25, 7
    110c:	99 1f       	adc	r25, r25
    110e:	61 f0       	breq	.+24     	; 0x1128 <__fp_splitA+0x20>
    1110:	9f 3f       	cpi	r25, 0xFF	; 255
    1112:	79 f0       	breq	.+30     	; 0x1132 <__fp_splitA+0x2a>
    1114:	87 95       	ror	r24
    1116:	08 95       	ret
    1118:	12 16       	cp	r1, r18
    111a:	13 06       	cpc	r1, r19
    111c:	14 06       	cpc	r1, r20
    111e:	55 1f       	adc	r21, r21
    1120:	f2 cf       	rjmp	.-28     	; 0x1106 <__fp_split3+0xe>
    1122:	46 95       	lsr	r20
    1124:	f1 df       	rcall	.-30     	; 0x1108 <__fp_splitA>
    1126:	08 c0       	rjmp	.+16     	; 0x1138 <__fp_splitA+0x30>
    1128:	16 16       	cp	r1, r22
    112a:	17 06       	cpc	r1, r23
    112c:	18 06       	cpc	r1, r24
    112e:	99 1f       	adc	r25, r25
    1130:	f1 cf       	rjmp	.-30     	; 0x1114 <__fp_splitA+0xc>
    1132:	86 95       	lsr	r24
    1134:	71 05       	cpc	r23, r1
    1136:	61 05       	cpc	r22, r1
    1138:	08 94       	sec
    113a:	08 95       	ret

0000113c <__fp_zero>:
    113c:	e8 94       	clt

0000113e <__fp_szero>:
    113e:	bb 27       	eor	r27, r27
    1140:	66 27       	eor	r22, r22
    1142:	77 27       	eor	r23, r23
    1144:	cb 01       	movw	r24, r22
    1146:	97 f9       	bld	r25, 7
    1148:	08 95       	ret

0000114a <__mulsf3>:
    114a:	0e 94 b8 08 	call	0x1170	; 0x1170 <__mulsf3x>
    114e:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__fp_round>
    1152:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__fp_pscA>
    1156:	38 f0       	brcs	.+14     	; 0x1166 <__mulsf3+0x1c>
    1158:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fp_pscB>
    115c:	20 f0       	brcs	.+8      	; 0x1166 <__mulsf3+0x1c>
    115e:	95 23       	and	r25, r21
    1160:	11 f0       	breq	.+4      	; 0x1166 <__mulsf3+0x1c>
    1162:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_inf>
    1166:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_nan>
    116a:	11 24       	eor	r1, r1
    116c:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_szero>

00001170 <__mulsf3x>:
    1170:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__fp_split3>
    1174:	70 f3       	brcs	.-36     	; 0x1152 <__mulsf3+0x8>

00001176 <__mulsf3_pse>:
    1176:	95 9f       	mul	r25, r21
    1178:	c1 f3       	breq	.-16     	; 0x116a <__mulsf3+0x20>
    117a:	95 0f       	add	r25, r21
    117c:	50 e0       	ldi	r21, 0x00	; 0
    117e:	55 1f       	adc	r21, r21
    1180:	62 9f       	mul	r22, r18
    1182:	f0 01       	movw	r30, r0
    1184:	72 9f       	mul	r23, r18
    1186:	bb 27       	eor	r27, r27
    1188:	f0 0d       	add	r31, r0
    118a:	b1 1d       	adc	r27, r1
    118c:	63 9f       	mul	r22, r19
    118e:	aa 27       	eor	r26, r26
    1190:	f0 0d       	add	r31, r0
    1192:	b1 1d       	adc	r27, r1
    1194:	aa 1f       	adc	r26, r26
    1196:	64 9f       	mul	r22, r20
    1198:	66 27       	eor	r22, r22
    119a:	b0 0d       	add	r27, r0
    119c:	a1 1d       	adc	r26, r1
    119e:	66 1f       	adc	r22, r22
    11a0:	82 9f       	mul	r24, r18
    11a2:	22 27       	eor	r18, r18
    11a4:	b0 0d       	add	r27, r0
    11a6:	a1 1d       	adc	r26, r1
    11a8:	62 1f       	adc	r22, r18
    11aa:	73 9f       	mul	r23, r19
    11ac:	b0 0d       	add	r27, r0
    11ae:	a1 1d       	adc	r26, r1
    11b0:	62 1f       	adc	r22, r18
    11b2:	83 9f       	mul	r24, r19
    11b4:	a0 0d       	add	r26, r0
    11b6:	61 1d       	adc	r22, r1
    11b8:	22 1f       	adc	r18, r18
    11ba:	74 9f       	mul	r23, r20
    11bc:	33 27       	eor	r19, r19
    11be:	a0 0d       	add	r26, r0
    11c0:	61 1d       	adc	r22, r1
    11c2:	23 1f       	adc	r18, r19
    11c4:	84 9f       	mul	r24, r20
    11c6:	60 0d       	add	r22, r0
    11c8:	21 1d       	adc	r18, r1
    11ca:	82 2f       	mov	r24, r18
    11cc:	76 2f       	mov	r23, r22
    11ce:	6a 2f       	mov	r22, r26
    11d0:	11 24       	eor	r1, r1
    11d2:	9f 57       	subi	r25, 0x7F	; 127
    11d4:	50 40       	sbci	r21, 0x00	; 0
    11d6:	9a f0       	brmi	.+38     	; 0x11fe <__mulsf3_pse+0x88>
    11d8:	f1 f0       	breq	.+60     	; 0x1216 <__mulsf3_pse+0xa0>
    11da:	88 23       	and	r24, r24
    11dc:	4a f0       	brmi	.+18     	; 0x11f0 <__mulsf3_pse+0x7a>
    11de:	ee 0f       	add	r30, r30
    11e0:	ff 1f       	adc	r31, r31
    11e2:	bb 1f       	adc	r27, r27
    11e4:	66 1f       	adc	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	88 1f       	adc	r24, r24
    11ea:	91 50       	subi	r25, 0x01	; 1
    11ec:	50 40       	sbci	r21, 0x00	; 0
    11ee:	a9 f7       	brne	.-22     	; 0x11da <__mulsf3_pse+0x64>
    11f0:	9e 3f       	cpi	r25, 0xFE	; 254
    11f2:	51 05       	cpc	r21, r1
    11f4:	80 f0       	brcs	.+32     	; 0x1216 <__mulsf3_pse+0xa0>
    11f6:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_inf>
    11fa:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_szero>
    11fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1200:	e4 f3       	brlt	.-8      	; 0x11fa <__mulsf3_pse+0x84>
    1202:	98 3e       	cpi	r25, 0xE8	; 232
    1204:	d4 f3       	brlt	.-12     	; 0x11fa <__mulsf3_pse+0x84>
    1206:	86 95       	lsr	r24
    1208:	77 95       	ror	r23
    120a:	67 95       	ror	r22
    120c:	b7 95       	ror	r27
    120e:	f7 95       	ror	r31
    1210:	e7 95       	ror	r30
    1212:	9f 5f       	subi	r25, 0xFF	; 255
    1214:	c1 f7       	brne	.-16     	; 0x1206 <__mulsf3_pse+0x90>
    1216:	fe 2b       	or	r31, r30
    1218:	88 0f       	add	r24, r24
    121a:	91 1d       	adc	r25, r1
    121c:	96 95       	lsr	r25
    121e:	87 95       	ror	r24
    1220:	97 f9       	bld	r25, 7
    1222:	08 95       	ret

00001224 <__udivmodsi4>:
    1224:	a1 e2       	ldi	r26, 0x21	; 33
    1226:	1a 2e       	mov	r1, r26
    1228:	aa 1b       	sub	r26, r26
    122a:	bb 1b       	sub	r27, r27
    122c:	fd 01       	movw	r30, r26
    122e:	0d c0       	rjmp	.+26     	; 0x124a <__udivmodsi4_ep>

00001230 <__udivmodsi4_loop>:
    1230:	aa 1f       	adc	r26, r26
    1232:	bb 1f       	adc	r27, r27
    1234:	ee 1f       	adc	r30, r30
    1236:	ff 1f       	adc	r31, r31
    1238:	a2 17       	cp	r26, r18
    123a:	b3 07       	cpc	r27, r19
    123c:	e4 07       	cpc	r30, r20
    123e:	f5 07       	cpc	r31, r21
    1240:	20 f0       	brcs	.+8      	; 0x124a <__udivmodsi4_ep>
    1242:	a2 1b       	sub	r26, r18
    1244:	b3 0b       	sbc	r27, r19
    1246:	e4 0b       	sbc	r30, r20
    1248:	f5 0b       	sbc	r31, r21

0000124a <__udivmodsi4_ep>:
    124a:	66 1f       	adc	r22, r22
    124c:	77 1f       	adc	r23, r23
    124e:	88 1f       	adc	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	1a 94       	dec	r1
    1254:	69 f7       	brne	.-38     	; 0x1230 <__udivmodsi4_loop>
    1256:	60 95       	com	r22
    1258:	70 95       	com	r23
    125a:	80 95       	com	r24
    125c:	90 95       	com	r25
    125e:	9b 01       	movw	r18, r22
    1260:	ac 01       	movw	r20, r24
    1262:	bd 01       	movw	r22, r26
    1264:	cf 01       	movw	r24, r30
    1266:	08 95       	ret

00001268 <__tablejump2__>:
    1268:	ee 0f       	add	r30, r30
    126a:	ff 1f       	adc	r31, r31
    126c:	05 90       	lpm	r0, Z+
    126e:	f4 91       	lpm	r31, Z
    1270:	e0 2d       	mov	r30, r0
    1272:	09 94       	ijmp

00001274 <calloc>:
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	86 9f       	mul	r24, r22
    127e:	80 01       	movw	r16, r0
    1280:	87 9f       	mul	r24, r23
    1282:	10 0d       	add	r17, r0
    1284:	96 9f       	mul	r25, r22
    1286:	10 0d       	add	r17, r0
    1288:	11 24       	eor	r1, r1
    128a:	c8 01       	movw	r24, r16
    128c:	0e 94 56 09 	call	0x12ac	; 0x12ac <malloc>
    1290:	ec 01       	movw	r28, r24
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	29 f0       	breq	.+10     	; 0x12a0 <calloc+0x2c>
    1296:	a8 01       	movw	r20, r16
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <memset>
    12a0:	ce 01       	movw	r24, r28
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	08 95       	ret

000012ac <malloc>:
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	82 30       	cpi	r24, 0x02	; 2
    12b6:	91 05       	cpc	r25, r1
    12b8:	10 f4       	brcc	.+4      	; 0x12be <malloc+0x12>
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <__flp>
    12c2:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <__flp+0x1>
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	a0 e0       	ldi	r26, 0x00	; 0
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	30 97       	sbiw	r30, 0x00	; 0
    12d0:	19 f1       	breq	.+70     	; 0x1318 <malloc+0x6c>
    12d2:	40 81       	ld	r20, Z
    12d4:	51 81       	ldd	r21, Z+1	; 0x01
    12d6:	02 81       	ldd	r16, Z+2	; 0x02
    12d8:	13 81       	ldd	r17, Z+3	; 0x03
    12da:	48 17       	cp	r20, r24
    12dc:	59 07       	cpc	r21, r25
    12de:	c8 f0       	brcs	.+50     	; 0x1312 <malloc+0x66>
    12e0:	84 17       	cp	r24, r20
    12e2:	95 07       	cpc	r25, r21
    12e4:	69 f4       	brne	.+26     	; 0x1300 <malloc+0x54>
    12e6:	10 97       	sbiw	r26, 0x00	; 0
    12e8:	31 f0       	breq	.+12     	; 0x12f6 <malloc+0x4a>
    12ea:	12 96       	adiw	r26, 0x02	; 2
    12ec:	0c 93       	st	X, r16
    12ee:	12 97       	sbiw	r26, 0x02	; 2
    12f0:	13 96       	adiw	r26, 0x03	; 3
    12f2:	1c 93       	st	X, r17
    12f4:	27 c0       	rjmp	.+78     	; 0x1344 <malloc+0x98>
    12f6:	00 93 56 01 	sts	0x0156, r16	; 0x800156 <__flp>
    12fa:	10 93 57 01 	sts	0x0157, r17	; 0x800157 <__flp+0x1>
    12fe:	22 c0       	rjmp	.+68     	; 0x1344 <malloc+0x98>
    1300:	21 15       	cp	r18, r1
    1302:	31 05       	cpc	r19, r1
    1304:	19 f0       	breq	.+6      	; 0x130c <malloc+0x60>
    1306:	42 17       	cp	r20, r18
    1308:	53 07       	cpc	r21, r19
    130a:	18 f4       	brcc	.+6      	; 0x1312 <malloc+0x66>
    130c:	9a 01       	movw	r18, r20
    130e:	bd 01       	movw	r22, r26
    1310:	ef 01       	movw	r28, r30
    1312:	df 01       	movw	r26, r30
    1314:	f8 01       	movw	r30, r16
    1316:	db cf       	rjmp	.-74     	; 0x12ce <malloc+0x22>
    1318:	21 15       	cp	r18, r1
    131a:	31 05       	cpc	r19, r1
    131c:	f9 f0       	breq	.+62     	; 0x135c <malloc+0xb0>
    131e:	28 1b       	sub	r18, r24
    1320:	39 0b       	sbc	r19, r25
    1322:	24 30       	cpi	r18, 0x04	; 4
    1324:	31 05       	cpc	r19, r1
    1326:	80 f4       	brcc	.+32     	; 0x1348 <malloc+0x9c>
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	9b 81       	ldd	r25, Y+3	; 0x03
    132c:	61 15       	cp	r22, r1
    132e:	71 05       	cpc	r23, r1
    1330:	21 f0       	breq	.+8      	; 0x133a <malloc+0x8e>
    1332:	fb 01       	movw	r30, r22
    1334:	93 83       	std	Z+3, r25	; 0x03
    1336:	82 83       	std	Z+2, r24	; 0x02
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <malloc+0x96>
    133a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__flp+0x1>
    133e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__flp>
    1342:	fe 01       	movw	r30, r28
    1344:	32 96       	adiw	r30, 0x02	; 2
    1346:	44 c0       	rjmp	.+136    	; 0x13d0 <malloc+0x124>
    1348:	fe 01       	movw	r30, r28
    134a:	e2 0f       	add	r30, r18
    134c:	f3 1f       	adc	r31, r19
    134e:	81 93       	st	Z+, r24
    1350:	91 93       	st	Z+, r25
    1352:	22 50       	subi	r18, 0x02	; 2
    1354:	31 09       	sbc	r19, r1
    1356:	39 83       	std	Y+1, r19	; 0x01
    1358:	28 83       	st	Y, r18
    135a:	3a c0       	rjmp	.+116    	; 0x13d0 <malloc+0x124>
    135c:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__brkval>
    1360:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__brkval+0x1>
    1364:	23 2b       	or	r18, r19
    1366:	41 f4       	brne	.+16     	; 0x1378 <malloc+0xcc>
    1368:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    136c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1370:	30 93 55 01 	sts	0x0155, r19	; 0x800155 <__brkval+0x1>
    1374:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <__brkval>
    1378:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    137c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1380:	21 15       	cp	r18, r1
    1382:	31 05       	cpc	r19, r1
    1384:	41 f4       	brne	.+16     	; 0x1396 <malloc+0xea>
    1386:	2d b7       	in	r18, 0x3d	; 61
    1388:	3e b7       	in	r19, 0x3e	; 62
    138a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    138e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1392:	24 1b       	sub	r18, r20
    1394:	35 0b       	sbc	r19, r21
    1396:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <__brkval>
    139a:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <__brkval+0x1>
    139e:	e2 17       	cp	r30, r18
    13a0:	f3 07       	cpc	r31, r19
    13a2:	a0 f4       	brcc	.+40     	; 0x13cc <malloc+0x120>
    13a4:	2e 1b       	sub	r18, r30
    13a6:	3f 0b       	sbc	r19, r31
    13a8:	28 17       	cp	r18, r24
    13aa:	39 07       	cpc	r19, r25
    13ac:	78 f0       	brcs	.+30     	; 0x13cc <malloc+0x120>
    13ae:	ac 01       	movw	r20, r24
    13b0:	4e 5f       	subi	r20, 0xFE	; 254
    13b2:	5f 4f       	sbci	r21, 0xFF	; 255
    13b4:	24 17       	cp	r18, r20
    13b6:	35 07       	cpc	r19, r21
    13b8:	48 f0       	brcs	.+18     	; 0x13cc <malloc+0x120>
    13ba:	4e 0f       	add	r20, r30
    13bc:	5f 1f       	adc	r21, r31
    13be:	50 93 55 01 	sts	0x0155, r21	; 0x800155 <__brkval+0x1>
    13c2:	40 93 54 01 	sts	0x0154, r20	; 0x800154 <__brkval>
    13c6:	81 93       	st	Z+, r24
    13c8:	91 93       	st	Z+, r25
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <malloc+0x124>
    13cc:	e0 e0       	ldi	r30, 0x00	; 0
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	cf 01       	movw	r24, r30
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	08 95       	ret

000013dc <free>:
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <free+0xa>
    13e4:	81 c0       	rjmp	.+258    	; 0x14e8 <free+0x10c>
    13e6:	fc 01       	movw	r30, r24
    13e8:	32 97       	sbiw	r30, 0x02	; 2
    13ea:	13 82       	std	Z+3, r1	; 0x03
    13ec:	12 82       	std	Z+2, r1	; 0x02
    13ee:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <__flp>
    13f2:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <__flp+0x1>
    13f6:	10 97       	sbiw	r26, 0x00	; 0
    13f8:	81 f4       	brne	.+32     	; 0x141a <free+0x3e>
    13fa:	20 81       	ld	r18, Z
    13fc:	31 81       	ldd	r19, Z+1	; 0x01
    13fe:	82 0f       	add	r24, r18
    1400:	93 1f       	adc	r25, r19
    1402:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__brkval>
    1406:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__brkval+0x1>
    140a:	28 17       	cp	r18, r24
    140c:	39 07       	cpc	r19, r25
    140e:	51 f5       	brne	.+84     	; 0x1464 <free+0x88>
    1410:	f0 93 55 01 	sts	0x0155, r31	; 0x800155 <__brkval+0x1>
    1414:	e0 93 54 01 	sts	0x0154, r30	; 0x800154 <__brkval>
    1418:	67 c0       	rjmp	.+206    	; 0x14e8 <free+0x10c>
    141a:	ed 01       	movw	r28, r26
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	ce 17       	cp	r28, r30
    1422:	df 07       	cpc	r29, r31
    1424:	40 f4       	brcc	.+16     	; 0x1436 <free+0x5a>
    1426:	4a 81       	ldd	r20, Y+2	; 0x02
    1428:	5b 81       	ldd	r21, Y+3	; 0x03
    142a:	9e 01       	movw	r18, r28
    142c:	41 15       	cp	r20, r1
    142e:	51 05       	cpc	r21, r1
    1430:	f1 f0       	breq	.+60     	; 0x146e <free+0x92>
    1432:	ea 01       	movw	r28, r20
    1434:	f5 cf       	rjmp	.-22     	; 0x1420 <free+0x44>
    1436:	d3 83       	std	Z+3, r29	; 0x03
    1438:	c2 83       	std	Z+2, r28	; 0x02
    143a:	40 81       	ld	r20, Z
    143c:	51 81       	ldd	r21, Z+1	; 0x01
    143e:	84 0f       	add	r24, r20
    1440:	95 1f       	adc	r25, r21
    1442:	c8 17       	cp	r28, r24
    1444:	d9 07       	cpc	r29, r25
    1446:	59 f4       	brne	.+22     	; 0x145e <free+0x82>
    1448:	88 81       	ld	r24, Y
    144a:	99 81       	ldd	r25, Y+1	; 0x01
    144c:	84 0f       	add	r24, r20
    144e:	95 1f       	adc	r25, r21
    1450:	02 96       	adiw	r24, 0x02	; 2
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	9b 81       	ldd	r25, Y+3	; 0x03
    145a:	93 83       	std	Z+3, r25	; 0x03
    145c:	82 83       	std	Z+2, r24	; 0x02
    145e:	21 15       	cp	r18, r1
    1460:	31 05       	cpc	r19, r1
    1462:	29 f4       	brne	.+10     	; 0x146e <free+0x92>
    1464:	f0 93 57 01 	sts	0x0157, r31	; 0x800157 <__flp+0x1>
    1468:	e0 93 56 01 	sts	0x0156, r30	; 0x800156 <__flp>
    146c:	3d c0       	rjmp	.+122    	; 0x14e8 <free+0x10c>
    146e:	e9 01       	movw	r28, r18
    1470:	fb 83       	std	Y+3, r31	; 0x03
    1472:	ea 83       	std	Y+2, r30	; 0x02
    1474:	49 91       	ld	r20, Y+
    1476:	59 91       	ld	r21, Y+
    1478:	c4 0f       	add	r28, r20
    147a:	d5 1f       	adc	r29, r21
    147c:	ec 17       	cp	r30, r28
    147e:	fd 07       	cpc	r31, r29
    1480:	61 f4       	brne	.+24     	; 0x149a <free+0xbe>
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	84 0f       	add	r24, r20
    1488:	95 1f       	adc	r25, r21
    148a:	02 96       	adiw	r24, 0x02	; 2
    148c:	e9 01       	movw	r28, r18
    148e:	99 83       	std	Y+1, r25	; 0x01
    1490:	88 83       	st	Y, r24
    1492:	82 81       	ldd	r24, Z+2	; 0x02
    1494:	93 81       	ldd	r25, Z+3	; 0x03
    1496:	9b 83       	std	Y+3, r25	; 0x03
    1498:	8a 83       	std	Y+2, r24	; 0x02
    149a:	e0 e0       	ldi	r30, 0x00	; 0
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	12 96       	adiw	r26, 0x02	; 2
    14a0:	8d 91       	ld	r24, X+
    14a2:	9c 91       	ld	r25, X
    14a4:	13 97       	sbiw	r26, 0x03	; 3
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	19 f0       	breq	.+6      	; 0x14b0 <free+0xd4>
    14aa:	fd 01       	movw	r30, r26
    14ac:	dc 01       	movw	r26, r24
    14ae:	f7 cf       	rjmp	.-18     	; 0x149e <free+0xc2>
    14b0:	8d 91       	ld	r24, X+
    14b2:	9c 91       	ld	r25, X
    14b4:	11 97       	sbiw	r26, 0x01	; 1
    14b6:	9d 01       	movw	r18, r26
    14b8:	2e 5f       	subi	r18, 0xFE	; 254
    14ba:	3f 4f       	sbci	r19, 0xFF	; 255
    14bc:	82 0f       	add	r24, r18
    14be:	93 1f       	adc	r25, r19
    14c0:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__brkval>
    14c4:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__brkval+0x1>
    14c8:	28 17       	cp	r18, r24
    14ca:	39 07       	cpc	r19, r25
    14cc:	69 f4       	brne	.+26     	; 0x14e8 <free+0x10c>
    14ce:	30 97       	sbiw	r30, 0x00	; 0
    14d0:	29 f4       	brne	.+10     	; 0x14dc <free+0x100>
    14d2:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <__flp+0x1>
    14d6:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__flp>
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <free+0x104>
    14dc:	13 82       	std	Z+3, r1	; 0x03
    14de:	12 82       	std	Z+2, r1	; 0x02
    14e0:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <__brkval+0x1>
    14e4:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <__brkval>
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	08 95       	ret

000014ee <memset>:
    14ee:	dc 01       	movw	r26, r24
    14f0:	01 c0       	rjmp	.+2      	; 0x14f4 <memset+0x6>
    14f2:	6d 93       	st	X+, r22
    14f4:	41 50       	subi	r20, 0x01	; 1
    14f6:	50 40       	sbci	r21, 0x00	; 0
    14f8:	e0 f7       	brcc	.-8      	; 0x14f2 <memset+0x4>
    14fa:	08 95       	ret

000014fc <vsnprintf>:
    14fc:	ae e0       	ldi	r26, 0x0E	; 14
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e4 e8       	ldi	r30, 0x84	; 132
    1502:	fa e0       	ldi	r31, 0x0A	; 10
    1504:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <__prologue_saves__+0x1c>
    1508:	8c 01       	movw	r16, r24
    150a:	fa 01       	movw	r30, r20
    150c:	86 e0       	ldi	r24, 0x06	; 6
    150e:	8c 83       	std	Y+4, r24	; 0x04
    1510:	1a 83       	std	Y+2, r17	; 0x02
    1512:	09 83       	std	Y+1, r16	; 0x01
    1514:	77 ff       	sbrs	r23, 7
    1516:	02 c0       	rjmp	.+4      	; 0x151c <vsnprintf+0x20>
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e8       	ldi	r23, 0x80	; 128
    151c:	cb 01       	movw	r24, r22
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
    1524:	a9 01       	movw	r20, r18
    1526:	bf 01       	movw	r22, r30
    1528:	ce 01       	movw	r24, r28
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <vfprintf>
    1530:	4d 81       	ldd	r20, Y+5	; 0x05
    1532:	5e 81       	ldd	r21, Y+6	; 0x06
    1534:	57 fd       	sbrc	r21, 7
    1536:	0a c0       	rjmp	.+20     	; 0x154c <vsnprintf+0x50>
    1538:	2f 81       	ldd	r18, Y+7	; 0x07
    153a:	38 85       	ldd	r19, Y+8	; 0x08
    153c:	42 17       	cp	r20, r18
    153e:	53 07       	cpc	r21, r19
    1540:	0c f4       	brge	.+2      	; 0x1544 <vsnprintf+0x48>
    1542:	9a 01       	movw	r18, r20
    1544:	f8 01       	movw	r30, r16
    1546:	e2 0f       	add	r30, r18
    1548:	f3 1f       	adc	r31, r19
    154a:	10 82       	st	Z, r1
    154c:	2e 96       	adiw	r28, 0x0e	; 14
    154e:	e4 e0       	ldi	r30, 0x04	; 4
    1550:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__epilogue_restores__+0x1c>

00001554 <vfprintf>:
    1554:	ab e0       	ldi	r26, 0x0B	; 11
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e0 eb       	ldi	r30, 0xB0	; 176
    155a:	fa e0       	ldi	r31, 0x0A	; 10
    155c:	0c 94 3b 0d 	jmp	0x1a76	; 0x1a76 <__prologue_saves__>
    1560:	6c 01       	movw	r12, r24
    1562:	7b 01       	movw	r14, r22
    1564:	8a 01       	movw	r16, r20
    1566:	fc 01       	movw	r30, r24
    1568:	17 82       	std	Z+7, r1	; 0x07
    156a:	16 82       	std	Z+6, r1	; 0x06
    156c:	83 81       	ldd	r24, Z+3	; 0x03
    156e:	81 ff       	sbrs	r24, 1
    1570:	cc c1       	rjmp	.+920    	; 0x190a <vfprintf+0x3b6>
    1572:	ce 01       	movw	r24, r28
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	3c 01       	movw	r6, r24
    1578:	f6 01       	movw	r30, r12
    157a:	93 81       	ldd	r25, Z+3	; 0x03
    157c:	f7 01       	movw	r30, r14
    157e:	93 fd       	sbrc	r25, 3
    1580:	85 91       	lpm	r24, Z+
    1582:	93 ff       	sbrs	r25, 3
    1584:	81 91       	ld	r24, Z+
    1586:	7f 01       	movw	r14, r30
    1588:	88 23       	and	r24, r24
    158a:	09 f4       	brne	.+2      	; 0x158e <vfprintf+0x3a>
    158c:	ba c1       	rjmp	.+884    	; 0x1902 <vfprintf+0x3ae>
    158e:	85 32       	cpi	r24, 0x25	; 37
    1590:	39 f4       	brne	.+14     	; 0x15a0 <vfprintf+0x4c>
    1592:	93 fd       	sbrc	r25, 3
    1594:	85 91       	lpm	r24, Z+
    1596:	93 ff       	sbrs	r25, 3
    1598:	81 91       	ld	r24, Z+
    159a:	7f 01       	movw	r14, r30
    159c:	85 32       	cpi	r24, 0x25	; 37
    159e:	29 f4       	brne	.+10     	; 0x15aa <vfprintf+0x56>
    15a0:	b6 01       	movw	r22, r12
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 a1 0c 	call	0x1942	; 0x1942 <fputc>
    15a8:	e7 cf       	rjmp	.-50     	; 0x1578 <vfprintf+0x24>
    15aa:	91 2c       	mov	r9, r1
    15ac:	21 2c       	mov	r2, r1
    15ae:	31 2c       	mov	r3, r1
    15b0:	ff e1       	ldi	r31, 0x1F	; 31
    15b2:	f3 15       	cp	r31, r3
    15b4:	d8 f0       	brcs	.+54     	; 0x15ec <vfprintf+0x98>
    15b6:	8b 32       	cpi	r24, 0x2B	; 43
    15b8:	79 f0       	breq	.+30     	; 0x15d8 <vfprintf+0x84>
    15ba:	38 f4       	brcc	.+14     	; 0x15ca <vfprintf+0x76>
    15bc:	80 32       	cpi	r24, 0x20	; 32
    15be:	79 f0       	breq	.+30     	; 0x15de <vfprintf+0x8a>
    15c0:	83 32       	cpi	r24, 0x23	; 35
    15c2:	a1 f4       	brne	.+40     	; 0x15ec <vfprintf+0x98>
    15c4:	23 2d       	mov	r18, r3
    15c6:	20 61       	ori	r18, 0x10	; 16
    15c8:	1d c0       	rjmp	.+58     	; 0x1604 <vfprintf+0xb0>
    15ca:	8d 32       	cpi	r24, 0x2D	; 45
    15cc:	61 f0       	breq	.+24     	; 0x15e6 <vfprintf+0x92>
    15ce:	80 33       	cpi	r24, 0x30	; 48
    15d0:	69 f4       	brne	.+26     	; 0x15ec <vfprintf+0x98>
    15d2:	23 2d       	mov	r18, r3
    15d4:	21 60       	ori	r18, 0x01	; 1
    15d6:	16 c0       	rjmp	.+44     	; 0x1604 <vfprintf+0xb0>
    15d8:	83 2d       	mov	r24, r3
    15da:	82 60       	ori	r24, 0x02	; 2
    15dc:	38 2e       	mov	r3, r24
    15de:	e3 2d       	mov	r30, r3
    15e0:	e4 60       	ori	r30, 0x04	; 4
    15e2:	3e 2e       	mov	r3, r30
    15e4:	2a c0       	rjmp	.+84     	; 0x163a <vfprintf+0xe6>
    15e6:	f3 2d       	mov	r31, r3
    15e8:	f8 60       	ori	r31, 0x08	; 8
    15ea:	1d c0       	rjmp	.+58     	; 0x1626 <vfprintf+0xd2>
    15ec:	37 fc       	sbrc	r3, 7
    15ee:	2d c0       	rjmp	.+90     	; 0x164a <vfprintf+0xf6>
    15f0:	20 ed       	ldi	r18, 0xD0	; 208
    15f2:	28 0f       	add	r18, r24
    15f4:	2a 30       	cpi	r18, 0x0A	; 10
    15f6:	40 f0       	brcs	.+16     	; 0x1608 <vfprintf+0xb4>
    15f8:	8e 32       	cpi	r24, 0x2E	; 46
    15fa:	b9 f4       	brne	.+46     	; 0x162a <vfprintf+0xd6>
    15fc:	36 fc       	sbrc	r3, 6
    15fe:	81 c1       	rjmp	.+770    	; 0x1902 <vfprintf+0x3ae>
    1600:	23 2d       	mov	r18, r3
    1602:	20 64       	ori	r18, 0x40	; 64
    1604:	32 2e       	mov	r3, r18
    1606:	19 c0       	rjmp	.+50     	; 0x163a <vfprintf+0xe6>
    1608:	36 fe       	sbrs	r3, 6
    160a:	06 c0       	rjmp	.+12     	; 0x1618 <vfprintf+0xc4>
    160c:	8a e0       	ldi	r24, 0x0A	; 10
    160e:	98 9e       	mul	r9, r24
    1610:	20 0d       	add	r18, r0
    1612:	11 24       	eor	r1, r1
    1614:	92 2e       	mov	r9, r18
    1616:	11 c0       	rjmp	.+34     	; 0x163a <vfprintf+0xe6>
    1618:	ea e0       	ldi	r30, 0x0A	; 10
    161a:	2e 9e       	mul	r2, r30
    161c:	20 0d       	add	r18, r0
    161e:	11 24       	eor	r1, r1
    1620:	22 2e       	mov	r2, r18
    1622:	f3 2d       	mov	r31, r3
    1624:	f0 62       	ori	r31, 0x20	; 32
    1626:	3f 2e       	mov	r3, r31
    1628:	08 c0       	rjmp	.+16     	; 0x163a <vfprintf+0xe6>
    162a:	8c 36       	cpi	r24, 0x6C	; 108
    162c:	21 f4       	brne	.+8      	; 0x1636 <vfprintf+0xe2>
    162e:	83 2d       	mov	r24, r3
    1630:	80 68       	ori	r24, 0x80	; 128
    1632:	38 2e       	mov	r3, r24
    1634:	02 c0       	rjmp	.+4      	; 0x163a <vfprintf+0xe6>
    1636:	88 36       	cpi	r24, 0x68	; 104
    1638:	41 f4       	brne	.+16     	; 0x164a <vfprintf+0xf6>
    163a:	f7 01       	movw	r30, r14
    163c:	93 fd       	sbrc	r25, 3
    163e:	85 91       	lpm	r24, Z+
    1640:	93 ff       	sbrs	r25, 3
    1642:	81 91       	ld	r24, Z+
    1644:	7f 01       	movw	r14, r30
    1646:	81 11       	cpse	r24, r1
    1648:	b3 cf       	rjmp	.-154    	; 0x15b0 <vfprintf+0x5c>
    164a:	98 2f       	mov	r25, r24
    164c:	9f 7d       	andi	r25, 0xDF	; 223
    164e:	95 54       	subi	r25, 0x45	; 69
    1650:	93 30       	cpi	r25, 0x03	; 3
    1652:	28 f4       	brcc	.+10     	; 0x165e <vfprintf+0x10a>
    1654:	0c 5f       	subi	r16, 0xFC	; 252
    1656:	1f 4f       	sbci	r17, 0xFF	; 255
    1658:	9f e3       	ldi	r25, 0x3F	; 63
    165a:	99 83       	std	Y+1, r25	; 0x01
    165c:	0d c0       	rjmp	.+26     	; 0x1678 <vfprintf+0x124>
    165e:	83 36       	cpi	r24, 0x63	; 99
    1660:	31 f0       	breq	.+12     	; 0x166e <vfprintf+0x11a>
    1662:	83 37       	cpi	r24, 0x73	; 115
    1664:	71 f0       	breq	.+28     	; 0x1682 <vfprintf+0x12e>
    1666:	83 35       	cpi	r24, 0x53	; 83
    1668:	09 f0       	breq	.+2      	; 0x166c <vfprintf+0x118>
    166a:	59 c0       	rjmp	.+178    	; 0x171e <vfprintf+0x1ca>
    166c:	21 c0       	rjmp	.+66     	; 0x16b0 <vfprintf+0x15c>
    166e:	f8 01       	movw	r30, r16
    1670:	80 81       	ld	r24, Z
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	0e 5f       	subi	r16, 0xFE	; 254
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	88 24       	eor	r8, r8
    167a:	83 94       	inc	r8
    167c:	91 2c       	mov	r9, r1
    167e:	53 01       	movw	r10, r6
    1680:	13 c0       	rjmp	.+38     	; 0x16a8 <vfprintf+0x154>
    1682:	28 01       	movw	r4, r16
    1684:	f2 e0       	ldi	r31, 0x02	; 2
    1686:	4f 0e       	add	r4, r31
    1688:	51 1c       	adc	r5, r1
    168a:	f8 01       	movw	r30, r16
    168c:	a0 80       	ld	r10, Z
    168e:	b1 80       	ldd	r11, Z+1	; 0x01
    1690:	36 fe       	sbrs	r3, 6
    1692:	03 c0       	rjmp	.+6      	; 0x169a <vfprintf+0x146>
    1694:	69 2d       	mov	r22, r9
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	02 c0       	rjmp	.+4      	; 0x169e <vfprintf+0x14a>
    169a:	6f ef       	ldi	r22, 0xFF	; 255
    169c:	7f ef       	ldi	r23, 0xFF	; 255
    169e:	c5 01       	movw	r24, r10
    16a0:	0e 94 96 0c 	call	0x192c	; 0x192c <strnlen>
    16a4:	4c 01       	movw	r8, r24
    16a6:	82 01       	movw	r16, r4
    16a8:	f3 2d       	mov	r31, r3
    16aa:	ff 77       	andi	r31, 0x7F	; 127
    16ac:	3f 2e       	mov	r3, r31
    16ae:	16 c0       	rjmp	.+44     	; 0x16dc <vfprintf+0x188>
    16b0:	28 01       	movw	r4, r16
    16b2:	22 e0       	ldi	r18, 0x02	; 2
    16b4:	42 0e       	add	r4, r18
    16b6:	51 1c       	adc	r5, r1
    16b8:	f8 01       	movw	r30, r16
    16ba:	a0 80       	ld	r10, Z
    16bc:	b1 80       	ldd	r11, Z+1	; 0x01
    16be:	36 fe       	sbrs	r3, 6
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <vfprintf+0x174>
    16c2:	69 2d       	mov	r22, r9
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <vfprintf+0x178>
    16c8:	6f ef       	ldi	r22, 0xFF	; 255
    16ca:	7f ef       	ldi	r23, 0xFF	; 255
    16cc:	c5 01       	movw	r24, r10
    16ce:	0e 94 8b 0c 	call	0x1916	; 0x1916 <strnlen_P>
    16d2:	4c 01       	movw	r8, r24
    16d4:	f3 2d       	mov	r31, r3
    16d6:	f0 68       	ori	r31, 0x80	; 128
    16d8:	3f 2e       	mov	r3, r31
    16da:	82 01       	movw	r16, r4
    16dc:	33 fc       	sbrc	r3, 3
    16de:	1b c0       	rjmp	.+54     	; 0x1716 <vfprintf+0x1c2>
    16e0:	82 2d       	mov	r24, r2
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	88 16       	cp	r8, r24
    16e6:	99 06       	cpc	r9, r25
    16e8:	b0 f4       	brcc	.+44     	; 0x1716 <vfprintf+0x1c2>
    16ea:	b6 01       	movw	r22, r12
    16ec:	80 e2       	ldi	r24, 0x20	; 32
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 a1 0c 	call	0x1942	; 0x1942 <fputc>
    16f4:	2a 94       	dec	r2
    16f6:	f4 cf       	rjmp	.-24     	; 0x16e0 <vfprintf+0x18c>
    16f8:	f5 01       	movw	r30, r10
    16fa:	37 fc       	sbrc	r3, 7
    16fc:	85 91       	lpm	r24, Z+
    16fe:	37 fe       	sbrs	r3, 7
    1700:	81 91       	ld	r24, Z+
    1702:	5f 01       	movw	r10, r30
    1704:	b6 01       	movw	r22, r12
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 a1 0c 	call	0x1942	; 0x1942 <fputc>
    170c:	21 10       	cpse	r2, r1
    170e:	2a 94       	dec	r2
    1710:	21 e0       	ldi	r18, 0x01	; 1
    1712:	82 1a       	sub	r8, r18
    1714:	91 08       	sbc	r9, r1
    1716:	81 14       	cp	r8, r1
    1718:	91 04       	cpc	r9, r1
    171a:	71 f7       	brne	.-36     	; 0x16f8 <vfprintf+0x1a4>
    171c:	e8 c0       	rjmp	.+464    	; 0x18ee <vfprintf+0x39a>
    171e:	84 36       	cpi	r24, 0x64	; 100
    1720:	11 f0       	breq	.+4      	; 0x1726 <vfprintf+0x1d2>
    1722:	89 36       	cpi	r24, 0x69	; 105
    1724:	41 f5       	brne	.+80     	; 0x1776 <vfprintf+0x222>
    1726:	f8 01       	movw	r30, r16
    1728:	37 fe       	sbrs	r3, 7
    172a:	07 c0       	rjmp	.+14     	; 0x173a <vfprintf+0x1e6>
    172c:	60 81       	ld	r22, Z
    172e:	71 81       	ldd	r23, Z+1	; 0x01
    1730:	82 81       	ldd	r24, Z+2	; 0x02
    1732:	93 81       	ldd	r25, Z+3	; 0x03
    1734:	0c 5f       	subi	r16, 0xFC	; 252
    1736:	1f 4f       	sbci	r17, 0xFF	; 255
    1738:	08 c0       	rjmp	.+16     	; 0x174a <vfprintf+0x1f6>
    173a:	60 81       	ld	r22, Z
    173c:	71 81       	ldd	r23, Z+1	; 0x01
    173e:	07 2e       	mov	r0, r23
    1740:	00 0c       	add	r0, r0
    1742:	88 0b       	sbc	r24, r24
    1744:	99 0b       	sbc	r25, r25
    1746:	0e 5f       	subi	r16, 0xFE	; 254
    1748:	1f 4f       	sbci	r17, 0xFF	; 255
    174a:	f3 2d       	mov	r31, r3
    174c:	ff 76       	andi	r31, 0x6F	; 111
    174e:	3f 2e       	mov	r3, r31
    1750:	97 ff       	sbrs	r25, 7
    1752:	09 c0       	rjmp	.+18     	; 0x1766 <vfprintf+0x212>
    1754:	90 95       	com	r25
    1756:	80 95       	com	r24
    1758:	70 95       	com	r23
    175a:	61 95       	neg	r22
    175c:	7f 4f       	sbci	r23, 0xFF	; 255
    175e:	8f 4f       	sbci	r24, 0xFF	; 255
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	f0 68       	ori	r31, 0x80	; 128
    1764:	3f 2e       	mov	r3, r31
    1766:	2a e0       	ldi	r18, 0x0A	; 10
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	a3 01       	movw	r20, r6
    176c:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__ultoa_invert>
    1770:	88 2e       	mov	r8, r24
    1772:	86 18       	sub	r8, r6
    1774:	45 c0       	rjmp	.+138    	; 0x1800 <vfprintf+0x2ac>
    1776:	85 37       	cpi	r24, 0x75	; 117
    1778:	31 f4       	brne	.+12     	; 0x1786 <vfprintf+0x232>
    177a:	23 2d       	mov	r18, r3
    177c:	2f 7e       	andi	r18, 0xEF	; 239
    177e:	b2 2e       	mov	r11, r18
    1780:	2a e0       	ldi	r18, 0x0A	; 10
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	25 c0       	rjmp	.+74     	; 0x17d0 <vfprintf+0x27c>
    1786:	93 2d       	mov	r25, r3
    1788:	99 7f       	andi	r25, 0xF9	; 249
    178a:	b9 2e       	mov	r11, r25
    178c:	8f 36       	cpi	r24, 0x6F	; 111
    178e:	c1 f0       	breq	.+48     	; 0x17c0 <vfprintf+0x26c>
    1790:	18 f4       	brcc	.+6      	; 0x1798 <vfprintf+0x244>
    1792:	88 35       	cpi	r24, 0x58	; 88
    1794:	79 f0       	breq	.+30     	; 0x17b4 <vfprintf+0x260>
    1796:	b5 c0       	rjmp	.+362    	; 0x1902 <vfprintf+0x3ae>
    1798:	80 37       	cpi	r24, 0x70	; 112
    179a:	19 f0       	breq	.+6      	; 0x17a2 <vfprintf+0x24e>
    179c:	88 37       	cpi	r24, 0x78	; 120
    179e:	21 f0       	breq	.+8      	; 0x17a8 <vfprintf+0x254>
    17a0:	b0 c0       	rjmp	.+352    	; 0x1902 <vfprintf+0x3ae>
    17a2:	e9 2f       	mov	r30, r25
    17a4:	e0 61       	ori	r30, 0x10	; 16
    17a6:	be 2e       	mov	r11, r30
    17a8:	b4 fe       	sbrs	r11, 4
    17aa:	0d c0       	rjmp	.+26     	; 0x17c6 <vfprintf+0x272>
    17ac:	fb 2d       	mov	r31, r11
    17ae:	f4 60       	ori	r31, 0x04	; 4
    17b0:	bf 2e       	mov	r11, r31
    17b2:	09 c0       	rjmp	.+18     	; 0x17c6 <vfprintf+0x272>
    17b4:	34 fe       	sbrs	r3, 4
    17b6:	0a c0       	rjmp	.+20     	; 0x17cc <vfprintf+0x278>
    17b8:	29 2f       	mov	r18, r25
    17ba:	26 60       	ori	r18, 0x06	; 6
    17bc:	b2 2e       	mov	r11, r18
    17be:	06 c0       	rjmp	.+12     	; 0x17cc <vfprintf+0x278>
    17c0:	28 e0       	ldi	r18, 0x08	; 8
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	05 c0       	rjmp	.+10     	; 0x17d0 <vfprintf+0x27c>
    17c6:	20 e1       	ldi	r18, 0x10	; 16
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <vfprintf+0x27c>
    17cc:	20 e1       	ldi	r18, 0x10	; 16
    17ce:	32 e0       	ldi	r19, 0x02	; 2
    17d0:	f8 01       	movw	r30, r16
    17d2:	b7 fe       	sbrs	r11, 7
    17d4:	07 c0       	rjmp	.+14     	; 0x17e4 <vfprintf+0x290>
    17d6:	60 81       	ld	r22, Z
    17d8:	71 81       	ldd	r23, Z+1	; 0x01
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	93 81       	ldd	r25, Z+3	; 0x03
    17de:	0c 5f       	subi	r16, 0xFC	; 252
    17e0:	1f 4f       	sbci	r17, 0xFF	; 255
    17e2:	06 c0       	rjmp	.+12     	; 0x17f0 <vfprintf+0x29c>
    17e4:	60 81       	ld	r22, Z
    17e6:	71 81       	ldd	r23, Z+1	; 0x01
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	0e 5f       	subi	r16, 0xFE	; 254
    17ee:	1f 4f       	sbci	r17, 0xFF	; 255
    17f0:	a3 01       	movw	r20, r6
    17f2:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__ultoa_invert>
    17f6:	88 2e       	mov	r8, r24
    17f8:	86 18       	sub	r8, r6
    17fa:	fb 2d       	mov	r31, r11
    17fc:	ff 77       	andi	r31, 0x7F	; 127
    17fe:	3f 2e       	mov	r3, r31
    1800:	36 fe       	sbrs	r3, 6
    1802:	0d c0       	rjmp	.+26     	; 0x181e <vfprintf+0x2ca>
    1804:	23 2d       	mov	r18, r3
    1806:	2e 7f       	andi	r18, 0xFE	; 254
    1808:	a2 2e       	mov	r10, r18
    180a:	89 14       	cp	r8, r9
    180c:	58 f4       	brcc	.+22     	; 0x1824 <vfprintf+0x2d0>
    180e:	34 fe       	sbrs	r3, 4
    1810:	0b c0       	rjmp	.+22     	; 0x1828 <vfprintf+0x2d4>
    1812:	32 fc       	sbrc	r3, 2
    1814:	09 c0       	rjmp	.+18     	; 0x1828 <vfprintf+0x2d4>
    1816:	83 2d       	mov	r24, r3
    1818:	8e 7e       	andi	r24, 0xEE	; 238
    181a:	a8 2e       	mov	r10, r24
    181c:	05 c0       	rjmp	.+10     	; 0x1828 <vfprintf+0x2d4>
    181e:	b8 2c       	mov	r11, r8
    1820:	a3 2c       	mov	r10, r3
    1822:	03 c0       	rjmp	.+6      	; 0x182a <vfprintf+0x2d6>
    1824:	b8 2c       	mov	r11, r8
    1826:	01 c0       	rjmp	.+2      	; 0x182a <vfprintf+0x2d6>
    1828:	b9 2c       	mov	r11, r9
    182a:	a4 fe       	sbrs	r10, 4
    182c:	0f c0       	rjmp	.+30     	; 0x184c <vfprintf+0x2f8>
    182e:	fe 01       	movw	r30, r28
    1830:	e8 0d       	add	r30, r8
    1832:	f1 1d       	adc	r31, r1
    1834:	80 81       	ld	r24, Z
    1836:	80 33       	cpi	r24, 0x30	; 48
    1838:	21 f4       	brne	.+8      	; 0x1842 <vfprintf+0x2ee>
    183a:	9a 2d       	mov	r25, r10
    183c:	99 7e       	andi	r25, 0xE9	; 233
    183e:	a9 2e       	mov	r10, r25
    1840:	09 c0       	rjmp	.+18     	; 0x1854 <vfprintf+0x300>
    1842:	a2 fe       	sbrs	r10, 2
    1844:	06 c0       	rjmp	.+12     	; 0x1852 <vfprintf+0x2fe>
    1846:	b3 94       	inc	r11
    1848:	b3 94       	inc	r11
    184a:	04 c0       	rjmp	.+8      	; 0x1854 <vfprintf+0x300>
    184c:	8a 2d       	mov	r24, r10
    184e:	86 78       	andi	r24, 0x86	; 134
    1850:	09 f0       	breq	.+2      	; 0x1854 <vfprintf+0x300>
    1852:	b3 94       	inc	r11
    1854:	a3 fc       	sbrc	r10, 3
    1856:	11 c0       	rjmp	.+34     	; 0x187a <vfprintf+0x326>
    1858:	a0 fe       	sbrs	r10, 0
    185a:	06 c0       	rjmp	.+12     	; 0x1868 <vfprintf+0x314>
    185c:	b2 14       	cp	r11, r2
    185e:	88 f4       	brcc	.+34     	; 0x1882 <vfprintf+0x32e>
    1860:	28 0c       	add	r2, r8
    1862:	92 2c       	mov	r9, r2
    1864:	9b 18       	sub	r9, r11
    1866:	0e c0       	rjmp	.+28     	; 0x1884 <vfprintf+0x330>
    1868:	b2 14       	cp	r11, r2
    186a:	60 f4       	brcc	.+24     	; 0x1884 <vfprintf+0x330>
    186c:	b6 01       	movw	r22, r12
    186e:	80 e2       	ldi	r24, 0x20	; 32
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0e 94 a1 0c 	call	0x1942	; 0x1942 <fputc>
    1876:	b3 94       	inc	r11
    1878:	f7 cf       	rjmp	.-18     	; 0x1868 <vfprintf+0x314>
    187a:	b2 14       	cp	r11, r2
    187c:	18 f4       	brcc	.+6      	; 0x1884 <vfprintf+0x330>
    187e:	2b 18       	sub	r2, r11
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <vfprintf+0x332>
    1882:	98 2c       	mov	r9, r8
    1884:	21 2c       	mov	r2, r1
    1886:	a4 fe       	sbrs	r10, 4
    1888:	10 c0       	rjmp	.+32     	; 0x18aa <vfprintf+0x356>
    188a:	b6 01       	movw	r22, r12
    188c:	80 e3       	ldi	r24, 0x30	; 48
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	0e 94 a1 0c 	call	0x1942	; 0x1942 <fputc>
    1894:	a2 fe       	sbrs	r10, 2
    1896:	17 c0       	rjmp	.+46     	; 0x18c6 <vfprintf+0x372>
    1898:	a1 fc       	sbrc	r10, 1
    189a:	03 c0       	rjmp	.+6      	; 0x18a2 <vfprintf+0x34e>
    189c:	88 e7       	ldi	r24, 0x78	; 120
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <vfprintf+0x352>
    18a2:	88 e5       	ldi	r24, 0x58	; 88
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	b6 01       	movw	r22, r12
    18a8:	0c c0       	rjmp	.+24     	; 0x18c2 <vfprintf+0x36e>
    18aa:	8a 2d       	mov	r24, r10
    18ac:	86 78       	andi	r24, 0x86	; 134
    18ae:	59 f0       	breq	.+22     	; 0x18c6 <vfprintf+0x372>
    18b0:	a1 fe       	sbrs	r10, 1
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <vfprintf+0x364>
    18b4:	8b e2       	ldi	r24, 0x2B	; 43
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <vfprintf+0x366>
    18b8:	80 e2       	ldi	r24, 0x20	; 32
    18ba:	a7 fc       	sbrc	r10, 7
    18bc:	8d e2       	ldi	r24, 0x2D	; 45
    18be:	b6 01       	movw	r22, r12
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 a1 0c 	call	0x1942	; 0x1942 <fputc>
    18c6:	89 14       	cp	r8, r9
    18c8:	38 f4       	brcc	.+14     	; 0x18d8 <vfprintf+0x384>
    18ca:	b6 01       	movw	r22, r12
    18cc:	80 e3       	ldi	r24, 0x30	; 48
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 a1 0c 	call	0x1942	; 0x1942 <fputc>
    18d4:	9a 94       	dec	r9
    18d6:	f7 cf       	rjmp	.-18     	; 0x18c6 <vfprintf+0x372>
    18d8:	8a 94       	dec	r8
    18da:	f3 01       	movw	r30, r6
    18dc:	e8 0d       	add	r30, r8
    18de:	f1 1d       	adc	r31, r1
    18e0:	80 81       	ld	r24, Z
    18e2:	b6 01       	movw	r22, r12
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 a1 0c 	call	0x1942	; 0x1942 <fputc>
    18ea:	81 10       	cpse	r8, r1
    18ec:	f5 cf       	rjmp	.-22     	; 0x18d8 <vfprintf+0x384>
    18ee:	22 20       	and	r2, r2
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <vfprintf+0x3a0>
    18f2:	42 ce       	rjmp	.-892    	; 0x1578 <vfprintf+0x24>
    18f4:	b6 01       	movw	r22, r12
    18f6:	80 e2       	ldi	r24, 0x20	; 32
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 a1 0c 	call	0x1942	; 0x1942 <fputc>
    18fe:	2a 94       	dec	r2
    1900:	f6 cf       	rjmp	.-20     	; 0x18ee <vfprintf+0x39a>
    1902:	f6 01       	movw	r30, r12
    1904:	86 81       	ldd	r24, Z+6	; 0x06
    1906:	97 81       	ldd	r25, Z+7	; 0x07
    1908:	02 c0       	rjmp	.+4      	; 0x190e <vfprintf+0x3ba>
    190a:	8f ef       	ldi	r24, 0xFF	; 255
    190c:	9f ef       	ldi	r25, 0xFF	; 255
    190e:	2b 96       	adiw	r28, 0x0b	; 11
    1910:	e2 e1       	ldi	r30, 0x12	; 18
    1912:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__epilogue_restores__>

00001916 <strnlen_P>:
    1916:	fc 01       	movw	r30, r24
    1918:	05 90       	lpm	r0, Z+
    191a:	61 50       	subi	r22, 0x01	; 1
    191c:	70 40       	sbci	r23, 0x00	; 0
    191e:	01 10       	cpse	r0, r1
    1920:	d8 f7       	brcc	.-10     	; 0x1918 <strnlen_P+0x2>
    1922:	80 95       	com	r24
    1924:	90 95       	com	r25
    1926:	8e 0f       	add	r24, r30
    1928:	9f 1f       	adc	r25, r31
    192a:	08 95       	ret

0000192c <strnlen>:
    192c:	fc 01       	movw	r30, r24
    192e:	61 50       	subi	r22, 0x01	; 1
    1930:	70 40       	sbci	r23, 0x00	; 0
    1932:	01 90       	ld	r0, Z+
    1934:	01 10       	cpse	r0, r1
    1936:	d8 f7       	brcc	.-10     	; 0x192e <strnlen+0x2>
    1938:	80 95       	com	r24
    193a:	90 95       	com	r25
    193c:	8e 0f       	add	r24, r30
    193e:	9f 1f       	adc	r25, r31
    1940:	08 95       	ret

00001942 <fputc>:
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	fb 01       	movw	r30, r22
    194c:	23 81       	ldd	r18, Z+3	; 0x03
    194e:	21 fd       	sbrc	r18, 1
    1950:	03 c0       	rjmp	.+6      	; 0x1958 <fputc+0x16>
    1952:	8f ef       	ldi	r24, 0xFF	; 255
    1954:	9f ef       	ldi	r25, 0xFF	; 255
    1956:	2c c0       	rjmp	.+88     	; 0x19b0 <fputc+0x6e>
    1958:	22 ff       	sbrs	r18, 2
    195a:	16 c0       	rjmp	.+44     	; 0x1988 <fputc+0x46>
    195c:	46 81       	ldd	r20, Z+6	; 0x06
    195e:	57 81       	ldd	r21, Z+7	; 0x07
    1960:	24 81       	ldd	r18, Z+4	; 0x04
    1962:	35 81       	ldd	r19, Z+5	; 0x05
    1964:	42 17       	cp	r20, r18
    1966:	53 07       	cpc	r21, r19
    1968:	44 f4       	brge	.+16     	; 0x197a <fputc+0x38>
    196a:	a0 81       	ld	r26, Z
    196c:	b1 81       	ldd	r27, Z+1	; 0x01
    196e:	9d 01       	movw	r18, r26
    1970:	2f 5f       	subi	r18, 0xFF	; 255
    1972:	3f 4f       	sbci	r19, 0xFF	; 255
    1974:	31 83       	std	Z+1, r19	; 0x01
    1976:	20 83       	st	Z, r18
    1978:	8c 93       	st	X, r24
    197a:	26 81       	ldd	r18, Z+6	; 0x06
    197c:	37 81       	ldd	r19, Z+7	; 0x07
    197e:	2f 5f       	subi	r18, 0xFF	; 255
    1980:	3f 4f       	sbci	r19, 0xFF	; 255
    1982:	37 83       	std	Z+7, r19	; 0x07
    1984:	26 83       	std	Z+6, r18	; 0x06
    1986:	14 c0       	rjmp	.+40     	; 0x19b0 <fputc+0x6e>
    1988:	8b 01       	movw	r16, r22
    198a:	ec 01       	movw	r28, r24
    198c:	fb 01       	movw	r30, r22
    198e:	00 84       	ldd	r0, Z+8	; 0x08
    1990:	f1 85       	ldd	r31, Z+9	; 0x09
    1992:	e0 2d       	mov	r30, r0
    1994:	09 95       	icall
    1996:	89 2b       	or	r24, r25
    1998:	e1 f6       	brne	.-72     	; 0x1952 <fputc+0x10>
    199a:	d8 01       	movw	r26, r16
    199c:	16 96       	adiw	r26, 0x06	; 6
    199e:	8d 91       	ld	r24, X+
    19a0:	9c 91       	ld	r25, X
    19a2:	17 97       	sbiw	r26, 0x07	; 7
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	17 96       	adiw	r26, 0x07	; 7
    19a8:	9c 93       	st	X, r25
    19aa:	8e 93       	st	-X, r24
    19ac:	16 97       	sbiw	r26, 0x06	; 6
    19ae:	ce 01       	movw	r24, r28
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	08 95       	ret

000019ba <__ultoa_invert>:
    19ba:	fa 01       	movw	r30, r20
    19bc:	aa 27       	eor	r26, r26
    19be:	28 30       	cpi	r18, 0x08	; 8
    19c0:	51 f1       	breq	.+84     	; 0x1a16 <__ultoa_invert+0x5c>
    19c2:	20 31       	cpi	r18, 0x10	; 16
    19c4:	81 f1       	breq	.+96     	; 0x1a26 <__ultoa_invert+0x6c>
    19c6:	e8 94       	clt
    19c8:	6f 93       	push	r22
    19ca:	6e 7f       	andi	r22, 0xFE	; 254
    19cc:	6e 5f       	subi	r22, 0xFE	; 254
    19ce:	7f 4f       	sbci	r23, 0xFF	; 255
    19d0:	8f 4f       	sbci	r24, 0xFF	; 255
    19d2:	9f 4f       	sbci	r25, 0xFF	; 255
    19d4:	af 4f       	sbci	r26, 0xFF	; 255
    19d6:	b1 e0       	ldi	r27, 0x01	; 1
    19d8:	3e d0       	rcall	.+124    	; 0x1a56 <__ultoa_invert+0x9c>
    19da:	b4 e0       	ldi	r27, 0x04	; 4
    19dc:	3c d0       	rcall	.+120    	; 0x1a56 <__ultoa_invert+0x9c>
    19de:	67 0f       	add	r22, r23
    19e0:	78 1f       	adc	r23, r24
    19e2:	89 1f       	adc	r24, r25
    19e4:	9a 1f       	adc	r25, r26
    19e6:	a1 1d       	adc	r26, r1
    19e8:	68 0f       	add	r22, r24
    19ea:	79 1f       	adc	r23, r25
    19ec:	8a 1f       	adc	r24, r26
    19ee:	91 1d       	adc	r25, r1
    19f0:	a1 1d       	adc	r26, r1
    19f2:	6a 0f       	add	r22, r26
    19f4:	71 1d       	adc	r23, r1
    19f6:	81 1d       	adc	r24, r1
    19f8:	91 1d       	adc	r25, r1
    19fa:	a1 1d       	adc	r26, r1
    19fc:	20 d0       	rcall	.+64     	; 0x1a3e <__ultoa_invert+0x84>
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <__ultoa_invert+0x48>
    1a00:	68 94       	set
    1a02:	3f 91       	pop	r19
    1a04:	2a e0       	ldi	r18, 0x0A	; 10
    1a06:	26 9f       	mul	r18, r22
    1a08:	11 24       	eor	r1, r1
    1a0a:	30 19       	sub	r19, r0
    1a0c:	30 5d       	subi	r19, 0xD0	; 208
    1a0e:	31 93       	st	Z+, r19
    1a10:	de f6       	brtc	.-74     	; 0x19c8 <__ultoa_invert+0xe>
    1a12:	cf 01       	movw	r24, r30
    1a14:	08 95       	ret
    1a16:	46 2f       	mov	r20, r22
    1a18:	47 70       	andi	r20, 0x07	; 7
    1a1a:	40 5d       	subi	r20, 0xD0	; 208
    1a1c:	41 93       	st	Z+, r20
    1a1e:	b3 e0       	ldi	r27, 0x03	; 3
    1a20:	0f d0       	rcall	.+30     	; 0x1a40 <__ultoa_invert+0x86>
    1a22:	c9 f7       	brne	.-14     	; 0x1a16 <__ultoa_invert+0x5c>
    1a24:	f6 cf       	rjmp	.-20     	; 0x1a12 <__ultoa_invert+0x58>
    1a26:	46 2f       	mov	r20, r22
    1a28:	4f 70       	andi	r20, 0x0F	; 15
    1a2a:	40 5d       	subi	r20, 0xD0	; 208
    1a2c:	4a 33       	cpi	r20, 0x3A	; 58
    1a2e:	18 f0       	brcs	.+6      	; 0x1a36 <__ultoa_invert+0x7c>
    1a30:	49 5d       	subi	r20, 0xD9	; 217
    1a32:	31 fd       	sbrc	r19, 1
    1a34:	40 52       	subi	r20, 0x20	; 32
    1a36:	41 93       	st	Z+, r20
    1a38:	02 d0       	rcall	.+4      	; 0x1a3e <__ultoa_invert+0x84>
    1a3a:	a9 f7       	brne	.-22     	; 0x1a26 <__ultoa_invert+0x6c>
    1a3c:	ea cf       	rjmp	.-44     	; 0x1a12 <__ultoa_invert+0x58>
    1a3e:	b4 e0       	ldi	r27, 0x04	; 4
    1a40:	a6 95       	lsr	r26
    1a42:	97 95       	ror	r25
    1a44:	87 95       	ror	r24
    1a46:	77 95       	ror	r23
    1a48:	67 95       	ror	r22
    1a4a:	ba 95       	dec	r27
    1a4c:	c9 f7       	brne	.-14     	; 0x1a40 <__ultoa_invert+0x86>
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	61 05       	cpc	r22, r1
    1a52:	71 05       	cpc	r23, r1
    1a54:	08 95       	ret
    1a56:	9b 01       	movw	r18, r22
    1a58:	ac 01       	movw	r20, r24
    1a5a:	0a 2e       	mov	r0, r26
    1a5c:	06 94       	lsr	r0
    1a5e:	57 95       	ror	r21
    1a60:	47 95       	ror	r20
    1a62:	37 95       	ror	r19
    1a64:	27 95       	ror	r18
    1a66:	ba 95       	dec	r27
    1a68:	c9 f7       	brne	.-14     	; 0x1a5c <__ultoa_invert+0xa2>
    1a6a:	62 0f       	add	r22, r18
    1a6c:	73 1f       	adc	r23, r19
    1a6e:	84 1f       	adc	r24, r20
    1a70:	95 1f       	adc	r25, r21
    1a72:	a0 1d       	adc	r26, r0
    1a74:	08 95       	ret

00001a76 <__prologue_saves__>:
    1a76:	2f 92       	push	r2
    1a78:	3f 92       	push	r3
    1a7a:	4f 92       	push	r4
    1a7c:	5f 92       	push	r5
    1a7e:	6f 92       	push	r6
    1a80:	7f 92       	push	r7
    1a82:	8f 92       	push	r8
    1a84:	9f 92       	push	r9
    1a86:	af 92       	push	r10
    1a88:	bf 92       	push	r11
    1a8a:	cf 92       	push	r12
    1a8c:	df 92       	push	r13
    1a8e:	ef 92       	push	r14
    1a90:	ff 92       	push	r15
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	ca 1b       	sub	r28, r26
    1aa0:	db 0b       	sbc	r29, r27
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	09 94       	ijmp

00001aae <__epilogue_restores__>:
    1aae:	2a 88       	ldd	r2, Y+18	; 0x12
    1ab0:	39 88       	ldd	r3, Y+17	; 0x11
    1ab2:	48 88       	ldd	r4, Y+16	; 0x10
    1ab4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ab6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ab8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1aba:	8c 84       	ldd	r8, Y+12	; 0x0c
    1abc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1abe:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ac0:	b9 84       	ldd	r11, Y+9	; 0x09
    1ac2:	c8 84       	ldd	r12, Y+8	; 0x08
    1ac4:	df 80       	ldd	r13, Y+7	; 0x07
    1ac6:	ee 80       	ldd	r14, Y+6	; 0x06
    1ac8:	fd 80       	ldd	r15, Y+5	; 0x05
    1aca:	0c 81       	ldd	r16, Y+4	; 0x04
    1acc:	1b 81       	ldd	r17, Y+3	; 0x03
    1ace:	aa 81       	ldd	r26, Y+2	; 0x02
    1ad0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ad2:	ce 0f       	add	r28, r30
    1ad4:	d1 1d       	adc	r29, r1
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	de bf       	out	0x3e, r29	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	ed 01       	movw	r28, r26
    1ae2:	08 95       	ret

00001ae4 <__do_global_dtors>:
    1ae4:	10 e0       	ldi	r17, 0x00	; 0
    1ae6:	cc e5       	ldi	r28, 0x5C	; 92
    1ae8:	d0 e0       	ldi	r29, 0x00	; 0
    1aea:	04 c0       	rjmp	.+8      	; 0x1af4 <__do_global_dtors+0x10>
    1aec:	fe 01       	movw	r30, r28
    1aee:	0e 94 34 09 	call	0x1268	; 0x1268 <__tablejump2__>
    1af2:	21 96       	adiw	r28, 0x01	; 1
    1af4:	ce 35       	cpi	r28, 0x5E	; 94
    1af6:	d1 07       	cpc	r29, r17
    1af8:	c9 f7       	brne	.-14     	; 0x1aec <__do_global_dtors+0x8>
    1afa:	f8 94       	cli

00001afc <__stop_program>:
    1afc:	ff cf       	rjmp	.-2      	; 0x1afc <__stop_program>
